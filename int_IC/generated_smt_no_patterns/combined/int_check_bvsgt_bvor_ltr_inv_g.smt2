(set-logic UFNIA)
(declare-fun two_to_the (Int) Int)
(declare-fun intand (Int Int Int) Int)
(declare-fun intor (Int Int Int) Int)
(declare-fun intxor (Int Int Int) Int)
(define-fun bitof ((k Int) (l Int) (a Int)) Int (mod (div a (two_to_the l)) 2))
(define-fun int_all_but_msb ((k Int) (a Int)) Int (mod a (two_to_the (- k 1))))
(define-fun intand_helper ((a Int) (b Int)) Int (ite (and (= a 1) (= b 1) ) 1 0))
(define-fun intor_helper ((a Int) (b Int)) Int (ite (and (= a 0) (= b 0) ) 0 1))
(define-fun intxor_helper ((a Int) (b Int)) Int (ite (or (and (= a 0) (=  b 1)) (and (= a 1) (= b 0))) 1 0))
(define-fun intmax ((k Int)) Int (- (two_to_the k) 1))
(define-fun intmin ((k Int)) Int 0)
(define-fun in_range ((k Int) (x Int)) Bool (and (>= x 0) (<= x (intmax k))))
(define-fun intudivtotal ((k Int) (a Int) (b Int)) Int (ite (= b 0) (- (two_to_the k) 1) (div a b) ))
(define-fun intmodtotal ((k Int) (a Int) (b Int)) Int (ite (= b 0) a (mod a b)))
(define-fun intneg ((k Int) (a Int)) Int (intmodtotal k (- (two_to_the k) a) (two_to_the k)))
(define-fun intnot ((k Int) (a Int)) Int (- (intmax k) a))
(define-fun intmins ((k Int)) Int (two_to_the (- k 1)))
(define-fun intmaxs ((k Int)) Int (intnot k (intmins k)))
(define-fun intshl ((k Int) (a Int) (b Int)) Int (intmodtotal k (* a (two_to_the b)) (two_to_the k)))
(define-fun intlshr ((k Int) (a Int) (b Int)) Int (intmodtotal k (intudivtotal k a (two_to_the b)) (two_to_the k)))
(define-fun intashr ((k Int) (a Int) (b Int) ) Int (ite (= (bitof k (- k 1) a) 0) (intlshr k a b) (intnot k (intlshr k (intnot k a) b))))
(define-fun intconcat ((k Int) (m Int) (a Int) (b Int)) Int (+ (* a (two_to_the m)) b))
(define-fun intadd ((k Int) (a Int) (b Int) ) Int (intmodtotal k (+ a b) (two_to_the k)))
(define-fun intmul ((k Int) (a Int) (b Int)) Int (intmodtotal k (* a b) (two_to_the k)))
(define-fun intsub ((k Int) (a Int) (b Int)) Int (intadd k a (intneg k b)))
(define-fun unsigned_to_signed ((k Int) (x Int)) Int (- (* 2 (int_all_but_msb k x)) x))
(define-fun intslt ((k Int) (a Int) (b Int)) Bool (< (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun intsgt ((k Int) (a Int) (b Int)) Bool (> (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun intsle ((k Int) (a Int) (b Int)) Bool (<= (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun intsge ((k Int) (a Int) (b Int)) Bool (>= (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun base_cases () Bool (and (= (two_to_the 0) 1) (= (two_to_the 1) 2) (= (two_to_the 2) 4) (= (two_to_the 3) 8) ) )
(define-fun two_to_the_ind_def () Bool (and (= (two_to_the 0) 1) (forall ((i Int)) (=> (> i 0) (= (two_to_the i) (* (two_to_the (- i 1)) 2)))  )))
(define-fun and_ind_def ((k Int)) Bool (forall ((a Int) (b Int)) (=> (and (> k 0) (in_range k a) (in_range k b)) (= (intand k a b) (+ (ite (> k 1) (intand (- k 1) (int_all_but_msb k a) (int_all_but_msb k b)) 0) (* (two_to_the (- k 1)) (intand_helper (bitof k (- k 1) a) (bitof k (- k 1) b))))))  ))
(define-fun or_ind_def ((k Int)) Bool (forall ((a Int) (b Int))   (=> (and (> k 0) (in_range k a) (in_range k b)) (= (intor k a b) (+ (ite (> k 1) (intor (- k 1) (int_all_but_msb k a) (int_all_but_msb k b)) 0) (* (two_to_the (- k 1)) (intor_helper (bitof k (- k 1) a) (bitof k (- k 1) b))))))  ))
(define-fun xor_ind_def ((k Int)) Bool (forall ((a Int) (b Int))   (=> (and (> k 0) (in_range k a) (in_range k b)) (= (intxor k a b) (+ (ite (> k 1) (intxor (- k 1) (int_all_but_msb k a) (int_all_but_msb k b)) 0) (* (two_to_the (- k 1)) (intxor_helper (bitof k (- k 1) a) (bitof k (- k 1) b))))))  ))
;two_to_the axioms
(define-fun weak_monotinicity () Bool (forall ((i Int) (j Int)) (=> (and (>= i 0) (>= j 0) ) (=> (<= i j) (<= (two_to_the i) (two_to_the j))) )))
(define-fun strong_monotinicity () Bool (forall ((i Int) (j Int)) (=> (and (>= i 0) (>= j 0) ) (=> (< i j) (< (two_to_the i) (two_to_the j))) ) ) )
(define-fun modular_power () Bool (forall ((i Int) (j Int) (x Int))  (=> (and (>= i 0) (>= j 0) (>= x 0) (distinct (mod (* x (two_to_the i)) (two_to_the j)) 0)) (< i j) )  ) )
(define-fun never_even () Bool (forall ((k Int) (x Int))  (=> (and (>= k 1) (>= x 0)) (distinct (- (two_to_the k) 1) (* 2 x)) )  ) )
(define-fun always_positive () Bool (forall ((k Int))  (=> (>= k 0) (>= (two_to_the k) 1) )  ) )
(define-fun div_zero () Bool (forall ((k Int))  (=> (>= k 0) (= (div k (two_to_the k)) 0 ) )  ) )
(define-fun two_to_the_properties () Bool (and base_cases weak_monotinicity strong_monotinicity modular_power never_even always_positive div_zero ) )
;and axioms
(define-fun and_max1 ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a)) (= (intand k a (intmax k)) a))  ))
(define-fun and_max2 ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a)) (= (intand k 0 a) 0   ))  ))
(define-fun and_ide ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a)) (= (intand k a a) a))  ))
(define-fun rule_of_contradiction ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a))  (= (intand k (intnot k a) a) 0 ))  ))
(define-fun and_sym ((k Int)) Bool (forall ((a Int) (b Int))  (=> (and (> k 0) (in_range k a) (in_range k b)) (= (intand k a b) (intand k b a))) ))
(define-fun and_difference1 ((k Int)) Bool (forall ((a Int) (b Int) (c Int))  (=> (and (distinct a b) (> k 0) (in_range k a) (in_range k b) (in_range k c) ) (or (distinct (intand k a c) b) (distinct (intand k b c) a)))  ))
(define-fun and_ranges ((k Int)) Bool (forall ((a Int) (b Int)) (and (=> (and (> k 0) (in_range k a ) (in_range k b ) ) (and (in_range k (intand k a b)) (<= (intand k a b) a) (<= (intand k a b) b) ) ))  ))
(define-fun and_properties ((k Int)) Bool (and (and_max1 k) (and_max2 k) (and_ide k) (rule_of_contradiction k) (and_sym k) (and_difference1 k) (and_ranges k) ))
;or axioms
(define-fun or_max1 ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a)) (= (intor k a (intmax k)) (intmax k)))  ))
(define-fun or_max2 ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a)) (= (intor k a 0) a)) ))
(define-fun or_ide ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a)) (= (intor k a a) a))  ))
(define-fun excluded_middle ((k Int)) Bool (forall ((a Int)) (=> (and (> k 0) (in_range k a)) (and (= (intor k (intnot k a) a) (intmax k)) (= (intor k a (intnot k a)) (intmax k))  )) ))
(define-fun or_difference1 ((k Int)) Bool (forall ((a Int) (b Int) (c Int))  (=> (and (distinct a b) (> k 0) (in_range k a) (in_range k b) (in_range k c) ) (or (distinct (intor k a c) b) (distinct (intor k b c) a)))  ))
(define-fun or_sym ((k Int)) Bool (forall ((a Int) (b Int))  (=> (and (> k 0) (in_range k a) (in_range k b)) (= (intor k a b) (intor k b a))) ))
(define-fun or_ranges ((k Int)) Bool (forall ((a Int) (b Int)) (and (=> (and (> k 0) (in_range k a) (in_range k b) ) (and (in_range k (intor k a b)) (>= (intor k a b) a) (>= (intor k a b) b) ) ))  ))
(define-fun or_properties ((k Int)) Bool (and (or_max1 k) (or_max2 k) (or_ide k) (excluded_middle k) (or_sym k) (or_difference1 k) (or_ranges k) ))
;xor axioms
(define-fun xor_ide ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a) ) (= (intxor k a a) 0))  ))
(define-fun xor_flip ((k Int)) Bool (forall ((a Int))  (=> (and (> k 0) (in_range k a)) (= (intxor k a (intnot k a)) (intmax k)))  ))
(define-fun xor_sym ((k Int)) Bool (forall ((a Int) (b Int))  (=> (and (> k 0) (in_range k a) (in_range k b)) (= (intxor k a b) (intxor k b a))) ))
(define-fun xor_ranges ((k Int)) Bool (forall ((a Int) (b Int)) (and (=> (and (> k 0) (in_range k a) (in_range k b) ) (in_range k (intxor k a b)) ))  ))
(define-fun xor_properties ((k Int)) Bool (and (xor_ide k) (xor_flip k) (xor_sym k) (xor_ranges k) ))
;combined axioms
(define-fun two_to_the_ax () Bool (and two_to_the_ind_def two_to_the_properties))
(define-fun and_ax ((k Int)) Bool (and (and_ind_def k) (and_properties k)))
(define-fun or_ax ((k Int)) Bool (and (or_ind_def k) (or_properties k)))
(define-fun xor_ax ((k Int)) Bool (and (xor_ind_def k) (xor_properties k)))
(define-fun range_assumptions ((k Int) (s Int) (t Int)) Bool (and (>= k 1) (in_range k s) (in_range k t)))

(define-fun l ((k Int) (x Int) (s Int) (t Int)) Bool  (intsgt k (intor k x s) t))
(define-fun SC ((k Int) (s Int) (t Int)) Bool (intslt k t (intor k s (intmaxs k))))

(declare-fun k () Int)
(declare-fun s () Int)
(declare-fun t () Int)

;<BEGIN_LTR>
(define-fun inv ((k Int) (s Int) (t Int)) Int (intmaxs k))
(define-fun l_part ((k Int) (s Int) (t Int)) Bool (l k ( inv k s t) s t))
(define-fun left_to_right ((k Int) (s Int) (t Int)) Bool (=> (SC k s t) (l_part k s t)))
(define-fun assertion_ltr () Bool (not (left_to_right k s t)))
;<END_LTR>


;general assertions
(assert (range_assumptions k s t))
(assert two_to_the_ax)

(assert (or_ax k))

(assert assertion_ltr)

(check-sat)