==> bench/defi000.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 4))
(assert
 (and (= C (bvsub (_ bv4 4) (_ bv1 4))) (and (distinct u_%x (_ bv1 8)) true) false))
(check-sat)

==> bench/defi002.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 4))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (let (($x141 (bvult C (_ bv4 4))))
 (and $x141 $x355 (and (distinct u_%a (_ bv1 8)) true) (not $x141)))))
(check-sat)

==> bench/defi003.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 4))
(assert
 (let (($x141 (bvult C (_ bv4 4))))
 (let (($x342 (not $x141)))
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (and $x141 $x355 $x342)))))
(check-sat)

==> bench/defi004.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 5))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv5 5) (_ bv1 5))) $x212 false)))
(check-sat)

==> bench/defi005.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 5))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (let (($x310 (bvult C (_ bv5 5))))
 (and $x310 $x142 $x231 (not $x310))))))
(check-sat)

==> bench/defi006.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 5))
(assert
 (let (($x310 (bvult C (_ bv5 5))))
 (let (($x472 (not $x310)))
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (and $x310 $x142 $x472)))))
(check-sat)

==> bench/defi007.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 6))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv6 6) (_ bv1 6))) $x212 false)))
(check-sat)

==> bench/defi008.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 6))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (let (($x605 (bvult C (_ bv6 6))))
 (and $x605 $x599 $x231 (not $x605))))))
(check-sat)

==> bench/defi009.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 6))
(assert
 (let (($x605 (bvult C (_ bv6 6))))
 (let (($x455 (not $x605)))
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (and $x605 $x599 $x455)))))
(check-sat)

==> bench/defi010.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 7))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv7 7) (_ bv1 7))) $x212 false)))
(check-sat)

==> bench/defi011.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 7))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (let (($x666 (bvult C (_ bv7 7))))
 (and $x666 $x660 $x231 (not $x666))))))
(check-sat)

==> bench/defi012.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 7))
(assert
 (let (($x666 (bvult C (_ bv7 7))))
 (let (($x557 (not $x666)))
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (and $x666 $x660 $x557)))))
(check-sat)

==> bench/defi013.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 8))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv8 8) (_ bv1 8))) $x212 false)))
(check-sat)

==> bench/defi014.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 8))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (let (($x727 (bvult C (_ bv8 8))))
 (and $x727 $x412 $x231 (not $x727))))))
(check-sat)

==> bench/defi015.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 8))
(assert
 (let (($x727 (bvult C (_ bv8 8))))
 (let (($x712 (not $x727)))
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (and $x727 $x412 $x712)))))
(check-sat)

==> bench/defi016.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 9))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv9 9) (_ bv1 9))) $x212 false)))
(check-sat)

==> bench/defi017.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 9))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (let (($x573 (bvult C (_ bv9 9))))
 (and $x573 $x369 $x231 (not $x573))))))
(check-sat)

==> bench/defi018.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 9))
(assert
 (let (($x573 (bvult C (_ bv9 9))))
 (let (($x635 (not $x573)))
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (and $x573 $x369 $x635)))))
(check-sat)

==> bench/defi019.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 10))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv10 10) (_ bv1 10))) $x212 false)))
(check-sat)

==> bench/defi020.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 10))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (let (($x816 (bvult C (_ bv10 10))))
 (and $x816 $x810 $x231 (not $x816))))))
(check-sat)

==> bench/defi021.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 10))
(assert
 (let (($x816 (bvult C (_ bv10 10))))
 (let (($x387 (not $x816)))
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (and $x816 $x810 $x387)))))
(check-sat)

==> bench/defi022.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 11))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv11 11) (_ bv1 11))) $x212 false)))
(check-sat)

==> bench/defi023.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 11))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (let (($x877 (bvult C (_ bv11 11))))
 (and $x877 $x871 $x231 (not $x877))))))
(check-sat)

==> bench/defi024.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 11))
(assert
 (let (($x877 (bvult C (_ bv11 11))))
 (let (($x768 (not $x877)))
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (and $x877 $x871 $x768)))))
(check-sat)

==> bench/defi025.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 12))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv12 12) (_ bv1 12))) $x212 false)))
(check-sat)

==> bench/defi026.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 12))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (let (($x938 (bvult C (_ bv12 12))))
 (and $x938 $x932 $x231 (not $x938))))))
(check-sat)

==> bench/defi027.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 12))
(assert
 (let (($x938 (bvult C (_ bv12 12))))
 (let (($x564 (not $x938)))
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (and $x938 $x932 $x564)))))
(check-sat)

==> bench/defi028.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 13))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv13 13) (_ bv1 13))) $x212 false)))
(check-sat)

==> bench/defi029.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 13))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (let (($x999 (bvult C (_ bv13 13))))
 (and $x999 $x993 $x231 (not $x999))))))
(check-sat)

==> bench/defi030.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 13))
(assert
 (let (($x999 (bvult C (_ bv13 13))))
 (let (($x561 (not $x999)))
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (and $x999 $x993 $x561)))))
(check-sat)

==> bench/defi031.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 14))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv14 14) (_ bv1 14))) $x212 false)))
(check-sat)

==> bench/defi032.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 14))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (let (($x1060 (bvult C (_ bv14 14))))
 (and $x1060 $x1054 $x231 (not $x1060))))))
(check-sat)

==> bench/defi033.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 14))
(assert
 (let (($x1060 (bvult C (_ bv14 14))))
 (let (($x408 (not $x1060)))
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (and $x1060 $x1054 $x408)))))
(check-sat)

==> bench/defi034.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 15))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv15 15) (_ bv1 15))) $x212 false)))
(check-sat)

==> bench/defi035.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 15))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (let (($x1121 (bvult C (_ bv15 15))))
 (and $x1121 $x1115 $x231 (not $x1121))))))
(check-sat)

==> bench/defi036.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 15))
(assert
 (let (($x1121 (bvult C (_ bv15 15))))
 (let (($x506 (not $x1121)))
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (and $x1121 $x1115 $x506)))))
(check-sat)

==> bench/defi037.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 16))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv16 16) (_ bv1 16))) $x212 false)))
(check-sat)

==> bench/defi038.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 16))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (let (($x1183 (bvult C (_ bv16 16))))
 (and $x1183 $x1177 $x231 (not $x1183))))))
(check-sat)

==> bench/defi039.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 16))
(assert
 (let (($x1183 (bvult C (_ bv16 16))))
 (let (($x1168 (not $x1183)))
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (and $x1183 $x1177 $x1168)))))
(check-sat)

==> bench/defi040.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 17))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv17 17) (_ bv1 17))) $x212 false)))
(check-sat)

==> bench/defi041.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 17))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (let (($x1244 (bvult C (_ bv17 17))))
 (and $x1244 $x1238 $x231 (not $x1244))))))
(check-sat)

==> bench/defi042.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 17))
(assert
 (let (($x1244 (bvult C (_ bv17 17))))
 (let (($x1229 (not $x1244)))
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (and $x1244 $x1238 $x1229)))))
(check-sat)

==> bench/defi043.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 18))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv18 18) (_ bv1 18))) $x212 false)))
(check-sat)

==> bench/defi044.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 18))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (let (($x1305 (bvult C (_ bv18 18))))
 (and $x1305 $x1299 $x231 (not $x1305))))))
(check-sat)

==> bench/defi045.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 18))
(assert
 (let (($x1305 (bvult C (_ bv18 18))))
 (let (($x1290 (not $x1305)))
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (and $x1305 $x1299 $x1290)))))
(check-sat)

==> bench/defi046.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 19))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv19 19) (_ bv1 19))) $x212 false)))
(check-sat)

==> bench/defi047.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 19))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (let (($x1366 (bvult C (_ bv19 19))))
 (and $x1366 $x1360 $x231 (not $x1366))))))
(check-sat)

==> bench/defi048.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 19))
(assert
 (let (($x1366 (bvult C (_ bv19 19))))
 (let (($x1351 (not $x1366)))
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (and $x1366 $x1360 $x1351)))))
(check-sat)

==> bench/defi049.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 20))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv20 20) (_ bv1 20))) $x212 false)))
(check-sat)

==> bench/defi050.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 20))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (let (($x1427 (bvult C (_ bv20 20))))
 (and $x1427 $x1421 $x231 (not $x1427))))))
(check-sat)

==> bench/defi051.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 20))
(assert
 (let (($x1427 (bvult C (_ bv20 20))))
 (let (($x1412 (not $x1427)))
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (and $x1427 $x1421 $x1412)))))
(check-sat)

==> bench/defi052.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 21))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv21 21) (_ bv1 21))) $x212 false)))
(check-sat)

==> bench/defi053.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 21))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (let (($x1488 (bvult C (_ bv21 21))))
 (and $x1488 $x1482 $x231 (not $x1488))))))
(check-sat)

==> bench/defi054.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 21))
(assert
 (let (($x1488 (bvult C (_ bv21 21))))
 (let (($x1473 (not $x1488)))
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (and $x1488 $x1482 $x1473)))))
(check-sat)

==> bench/defi055.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 22))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv22 22) (_ bv1 22))) $x212 false)))
(check-sat)

==> bench/defi056.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 22))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (let (($x1549 (bvult C (_ bv22 22))))
 (and $x1549 $x1543 $x231 (not $x1549))))))
(check-sat)

==> bench/defi057.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 22))
(assert
 (let (($x1549 (bvult C (_ bv22 22))))
 (let (($x1534 (not $x1549)))
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (and $x1549 $x1543 $x1534)))))
(check-sat)

==> bench/defi058.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 23))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv23 23) (_ bv1 23))) $x212 false)))
(check-sat)

==> bench/defi059.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 23))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (let (($x1610 (bvult C (_ bv23 23))))
 (and $x1610 $x1604 $x231 (not $x1610))))))
(check-sat)

==> bench/defi060.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 23))
(assert
 (let (($x1610 (bvult C (_ bv23 23))))
 (let (($x1595 (not $x1610)))
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (and $x1610 $x1604 $x1595)))))
(check-sat)

==> bench/defi061.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 24))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv24 24) (_ bv1 24))) $x212 false)))
(check-sat)

==> bench/defi062.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 24))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (let (($x1671 (bvult C (_ bv24 24))))
 (and $x1671 $x1665 $x231 (not $x1671))))))
(check-sat)

==> bench/defi063.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 24))
(assert
 (let (($x1671 (bvult C (_ bv24 24))))
 (let (($x1656 (not $x1671)))
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (and $x1671 $x1665 $x1656)))))
(check-sat)

==> bench/defi064.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 25))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv25 25) (_ bv1 25))) $x212 false)))
(check-sat)

==> bench/defi065.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 25))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (let (($x1732 (bvult C (_ bv25 25))))
 (and $x1732 $x1726 $x231 (not $x1732))))))
(check-sat)

==> bench/defi066.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 25))
(assert
 (let (($x1732 (bvult C (_ bv25 25))))
 (let (($x1717 (not $x1732)))
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (and $x1732 $x1726 $x1717)))))
(check-sat)

==> bench/defi067.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 26))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv26 26) (_ bv1 26))) $x212 false)))
(check-sat)

==> bench/defi068.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 26))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (let (($x1793 (bvult C (_ bv26 26))))
 (and $x1793 $x1787 $x231 (not $x1793))))))
(check-sat)

==> bench/defi069.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 26))
(assert
 (let (($x1793 (bvult C (_ bv26 26))))
 (let (($x1778 (not $x1793)))
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (and $x1793 $x1787 $x1778)))))
(check-sat)

==> bench/defi070.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 27))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv27 27) (_ bv1 27))) $x212 false)))
(check-sat)

==> bench/defi071.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 27))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (let (($x1854 (bvult C (_ bv27 27))))
 (and $x1854 $x1848 $x231 (not $x1854))))))
(check-sat)

==> bench/defi072.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 27))
(assert
 (let (($x1854 (bvult C (_ bv27 27))))
 (let (($x1839 (not $x1854)))
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (and $x1854 $x1848 $x1839)))))
(check-sat)

==> bench/defi073.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 28))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv28 28) (_ bv1 28))) $x212 false)))
(check-sat)

==> bench/defi074.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 28))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (let (($x1915 (bvult C (_ bv28 28))))
 (and $x1915 $x1909 $x231 (not $x1915))))))
(check-sat)

==> bench/defi075.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 28))
(assert
 (let (($x1915 (bvult C (_ bv28 28))))
 (let (($x1900 (not $x1915)))
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (and $x1915 $x1909 $x1900)))))
(check-sat)

==> bench/defi076.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 29))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv29 29) (_ bv1 29))) $x212 false)))
(check-sat)

==> bench/defi077.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 29))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (let (($x1976 (bvult C (_ bv29 29))))
 (and $x1976 $x1970 $x231 (not $x1976))))))
(check-sat)

==> bench/defi078.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 29))
(assert
 (let (($x1976 (bvult C (_ bv29 29))))
 (let (($x1961 (not $x1976)))
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (and $x1976 $x1970 $x1961)))))
(check-sat)

==> bench/defi079.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 30))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv30 30) (_ bv1 30))) $x212 false)))
(check-sat)

==> bench/defi080.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 30))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (let (($x2037 (bvult C (_ bv30 30))))
 (and $x2037 $x2031 $x231 (not $x2037))))))
(check-sat)

==> bench/defi081.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 30))
(assert
 (let (($x2037 (bvult C (_ bv30 30))))
 (let (($x2022 (not $x2037)))
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (and $x2037 $x2031 $x2022)))))
(check-sat)

==> bench/defi082.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 31))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv31 31) (_ bv1 31))) $x212 false)))
(check-sat)

==> bench/defi083.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 31))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (let (($x2098 (bvult C (_ bv31 31))))
 (and $x2098 $x2092 $x231 (not $x2098))))))
(check-sat)

==> bench/defi084.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 31))
(assert
 (let (($x2098 (bvult C (_ bv31 31))))
 (let (($x2083 (not $x2098)))
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (and $x2098 $x2092 $x2083)))))
(check-sat)

==> bench/defi085.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 32))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv32 32) (_ bv1 32))) $x212 false)))
(check-sat)

==> bench/defi086.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 32))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (let (($x2158 (bvult C (_ bv32 32))))
 (and $x2158 $x2152 $x231 (not $x2158))))))
(check-sat)

==> bench/defi087.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 32))
(assert
 (let (($x2158 (bvult C (_ bv32 32))))
 (let (($x2011 (not $x2158)))
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (and $x2158 $x2152 $x2011)))))
(check-sat)

==> bench/defi088.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 33))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv33 33) (_ bv1 33))) $x212 false)))
(check-sat)

==> bench/defi089.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 33))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (let (($x2215 (bvult C (_ bv33 33))))
 (and $x2215 $x2209 $x231 (not $x2215))))))
(check-sat)

==> bench/defi090.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 33))
(assert
 (let (($x2215 (bvult C (_ bv33 33))))
 (let (($x2201 (not $x2215)))
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (and $x2215 $x2209 $x2201)))))
(check-sat)

==> bench/defi091.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 34))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv34 34) (_ bv1 34))) $x212 false)))
(check-sat)

==> bench/defi092.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 34))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (let (($x2279 (bvult C (_ bv34 34))))
 (and $x2279 $x2273 $x231 (not $x2279))))))
(check-sat)

==> bench/defi093.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 34))
(assert
 (let (($x2279 (bvult C (_ bv34 34))))
 (let (($x2264 (not $x2279)))
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (and $x2279 $x2273 $x2264)))))
(check-sat)

==> bench/defi094.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 35))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv35 35) (_ bv1 35))) $x212 false)))
(check-sat)

==> bench/defi095.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 35))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (let (($x2340 (bvult C (_ bv35 35))))
 (and $x2340 $x2334 $x231 (not $x2340))))))
(check-sat)

==> bench/defi096.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 35))
(assert
 (let (($x2340 (bvult C (_ bv35 35))))
 (let (($x2325 (not $x2340)))
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (and $x2340 $x2334 $x2325)))))
(check-sat)

==> bench/defi097.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 36))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv36 36) (_ bv1 36))) $x212 false)))
(check-sat)

==> bench/defi098.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 36))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (let (($x2401 (bvult C (_ bv36 36))))
 (and $x2401 $x2395 $x231 (not $x2401))))))
(check-sat)

==> bench/defi099.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 36))
(assert
 (let (($x2401 (bvult C (_ bv36 36))))
 (let (($x2386 (not $x2401)))
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (and $x2401 $x2395 $x2386)))))
(check-sat)

==> bench/defi100.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 37))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv37 37) (_ bv1 37))) $x212 false)))
(check-sat)

==> bench/defi101.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 37))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (let (($x2462 (bvult C (_ bv37 37))))
 (and $x2462 $x2456 $x231 (not $x2462))))))
(check-sat)

==> bench/defi102.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 37))
(assert
 (let (($x2462 (bvult C (_ bv37 37))))
 (let (($x2447 (not $x2462)))
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (and $x2462 $x2456 $x2447)))))
(check-sat)

==> bench/defi103.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 38))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv38 38) (_ bv1 38))) $x212 false)))
(check-sat)

==> bench/defi104.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 38))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (let (($x2523 (bvult C (_ bv38 38))))
 (and $x2523 $x2517 $x231 (not $x2523))))))
(check-sat)

==> bench/defi105.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 38))
(assert
 (let (($x2523 (bvult C (_ bv38 38))))
 (let (($x2508 (not $x2523)))
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (and $x2523 $x2517 $x2508)))))
(check-sat)

==> bench/defi106.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 39))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv39 39) (_ bv1 39))) $x212 false)))
(check-sat)

==> bench/defi107.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 39))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (let (($x2584 (bvult C (_ bv39 39))))
 (and $x2584 $x2578 $x231 (not $x2584))))))
(check-sat)

==> bench/defi108.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 39))
(assert
 (let (($x2584 (bvult C (_ bv39 39))))
 (let (($x2569 (not $x2584)))
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (and $x2584 $x2578 $x2569)))))
(check-sat)

==> bench/defi109.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 40))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv40 40) (_ bv1 40))) $x212 false)))
(check-sat)

==> bench/defi110.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 40))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (let (($x2645 (bvult C (_ bv40 40))))
 (and $x2645 $x2639 $x231 (not $x2645))))))
(check-sat)

==> bench/defi111.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 40))
(assert
 (let (($x2645 (bvult C (_ bv40 40))))
 (let (($x2630 (not $x2645)))
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (and $x2645 $x2639 $x2630)))))
(check-sat)

==> bench/defi112.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 41))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv41 41) (_ bv1 41))) $x212 false)))
(check-sat)

==> bench/defi113.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 41))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (let (($x2706 (bvult C (_ bv41 41))))
 (and $x2706 $x2700 $x231 (not $x2706))))))
(check-sat)

==> bench/defi114.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 41))
(assert
 (let (($x2706 (bvult C (_ bv41 41))))
 (let (($x2691 (not $x2706)))
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (and $x2706 $x2700 $x2691)))))
(check-sat)

==> bench/defi115.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 42))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv42 42) (_ bv1 42))) $x212 false)))
(check-sat)

==> bench/defi116.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 42))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (let (($x2767 (bvult C (_ bv42 42))))
 (and $x2767 $x2761 $x231 (not $x2767))))))
(check-sat)

==> bench/defi117.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 42))
(assert
 (let (($x2767 (bvult C (_ bv42 42))))
 (let (($x2752 (not $x2767)))
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (and $x2767 $x2761 $x2752)))))
(check-sat)

==> bench/defi118.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 43))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv43 43) (_ bv1 43))) $x212 false)))
(check-sat)

==> bench/defi119.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 43))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (let (($x2828 (bvult C (_ bv43 43))))
 (and $x2828 $x2822 $x231 (not $x2828))))))
(check-sat)

==> bench/defi120.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 43))
(assert
 (let (($x2828 (bvult C (_ bv43 43))))
 (let (($x2813 (not $x2828)))
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (and $x2828 $x2822 $x2813)))))
(check-sat)

==> bench/defi121.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 44))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv44 44) (_ bv1 44))) $x212 false)))
(check-sat)

==> bench/defi122.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 44))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (let (($x2889 (bvult C (_ bv44 44))))
 (and $x2889 $x2883 $x231 (not $x2889))))))
(check-sat)

==> bench/defi123.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 44))
(assert
 (let (($x2889 (bvult C (_ bv44 44))))
 (let (($x2874 (not $x2889)))
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (and $x2889 $x2883 $x2874)))))
(check-sat)

==> bench/defi124.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 45))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv45 45) (_ bv1 45))) $x212 false)))
(check-sat)

==> bench/defi125.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 45))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (let (($x2950 (bvult C (_ bv45 45))))
 (and $x2950 $x2944 $x231 (not $x2950))))))
(check-sat)

==> bench/defi126.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 45))
(assert
 (let (($x2950 (bvult C (_ bv45 45))))
 (let (($x2935 (not $x2950)))
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (and $x2950 $x2944 $x2935)))))
(check-sat)

==> bench/defi127.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 46))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv46 46) (_ bv1 46))) $x212 false)))
(check-sat)

==> bench/defi128.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 46))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (let (($x3011 (bvult C (_ bv46 46))))
 (and $x3011 $x3005 $x231 (not $x3011))))))
(check-sat)

==> bench/defi129.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 46))
(assert
 (let (($x3011 (bvult C (_ bv46 46))))
 (let (($x2996 (not $x3011)))
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (and $x3011 $x3005 $x2996)))))
(check-sat)

==> bench/defi130.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 47))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv47 47) (_ bv1 47))) $x212 false)))
(check-sat)

==> bench/defi131.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 47))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (let (($x3072 (bvult C (_ bv47 47))))
 (and $x3072 $x3066 $x231 (not $x3072))))))
(check-sat)

==> bench/defi132.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 47))
(assert
 (let (($x3072 (bvult C (_ bv47 47))))
 (let (($x3057 (not $x3072)))
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (and $x3072 $x3066 $x3057)))))
(check-sat)

==> bench/defi133.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 48))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv48 48) (_ bv1 48))) $x212 false)))
(check-sat)

==> bench/defi134.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 48))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (let (($x3133 (bvult C (_ bv48 48))))
 (and $x3133 $x3127 $x231 (not $x3133))))))
(check-sat)

==> bench/defi135.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 48))
(assert
 (let (($x3133 (bvult C (_ bv48 48))))
 (let (($x3118 (not $x3133)))
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (and $x3133 $x3127 $x3118)))))
(check-sat)

==> bench/defi136.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 49))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv49 49) (_ bv1 49))) $x212 false)))
(check-sat)

==> bench/defi137.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 49))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (let (($x3194 (bvult C (_ bv49 49))))
 (and $x3194 $x3188 $x231 (not $x3194))))))
(check-sat)

==> bench/defi138.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 49))
(assert
 (let (($x3194 (bvult C (_ bv49 49))))
 (let (($x3179 (not $x3194)))
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (and $x3194 $x3188 $x3179)))))
(check-sat)

==> bench/defi139.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 50))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv50 50) (_ bv1 50))) $x212 false)))
(check-sat)

==> bench/defi140.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 50))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (let (($x3255 (bvult C (_ bv50 50))))
 (and $x3255 $x3249 $x231 (not $x3255))))))
(check-sat)

==> bench/defi141.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 50))
(assert
 (let (($x3255 (bvult C (_ bv50 50))))
 (let (($x3240 (not $x3255)))
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (and $x3255 $x3249 $x3240)))))
(check-sat)

==> bench/defi142.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 51))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv51 51) (_ bv1 51))) $x212 false)))
(check-sat)

==> bench/defi143.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 51))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (let (($x3316 (bvult C (_ bv51 51))))
 (and $x3316 $x3310 $x231 (not $x3316))))))
(check-sat)

==> bench/defi144.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 51))
(assert
 (let (($x3316 (bvult C (_ bv51 51))))
 (let (($x3301 (not $x3316)))
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (and $x3316 $x3310 $x3301)))))
(check-sat)

==> bench/defi145.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 52))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv52 52) (_ bv1 52))) $x212 false)))
(check-sat)

==> bench/defi146.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 52))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (let (($x3377 (bvult C (_ bv52 52))))
 (and $x3377 $x3371 $x231 (not $x3377))))))
(check-sat)

==> bench/defi147.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 52))
(assert
 (let (($x3377 (bvult C (_ bv52 52))))
 (let (($x3362 (not $x3377)))
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (and $x3377 $x3371 $x3362)))))
(check-sat)

==> bench/defi148.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 53))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv53 53) (_ bv1 53))) $x212 false)))
(check-sat)

==> bench/defi149.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 53))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (let (($x3438 (bvult C (_ bv53 53))))
 (and $x3438 $x3432 $x231 (not $x3438))))))
(check-sat)

==> bench/defi150.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 53))
(assert
 (let (($x3438 (bvult C (_ bv53 53))))
 (let (($x3423 (not $x3438)))
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (and $x3438 $x3432 $x3423)))))
(check-sat)

==> bench/defi151.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 54))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv54 54) (_ bv1 54))) $x212 false)))
(check-sat)

==> bench/defi152.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 54))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (let (($x3499 (bvult C (_ bv54 54))))
 (and $x3499 $x3493 $x231 (not $x3499))))))
(check-sat)

==> bench/defi153.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 54))
(assert
 (let (($x3499 (bvult C (_ bv54 54))))
 (let (($x3484 (not $x3499)))
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (and $x3499 $x3493 $x3484)))))
(check-sat)

==> bench/defi154.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 55))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv55 55) (_ bv1 55))) $x212 false)))
(check-sat)

==> bench/defi155.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 55))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (let (($x3560 (bvult C (_ bv55 55))))
 (and $x3560 $x3554 $x231 (not $x3560))))))
(check-sat)

==> bench/defi156.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 55))
(assert
 (let (($x3560 (bvult C (_ bv55 55))))
 (let (($x3545 (not $x3560)))
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (and $x3560 $x3554 $x3545)))))
(check-sat)

==> bench/defi157.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 56))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv56 56) (_ bv1 56))) $x212 false)))
(check-sat)

==> bench/defi158.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 56))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (let (($x3621 (bvult C (_ bv56 56))))
 (and $x3621 $x3615 $x231 (not $x3621))))))
(check-sat)

==> bench/defi159.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 56))
(assert
 (let (($x3621 (bvult C (_ bv56 56))))
 (let (($x3606 (not $x3621)))
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (and $x3621 $x3615 $x3606)))))
(check-sat)

==> bench/defi160.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 57))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv57 57) (_ bv1 57))) $x212 false)))
(check-sat)

==> bench/defi161.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 57))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (let (($x3682 (bvult C (_ bv57 57))))
 (and $x3682 $x3676 $x231 (not $x3682))))))
(check-sat)

==> bench/defi162.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 57))
(assert
 (let (($x3682 (bvult C (_ bv57 57))))
 (let (($x3667 (not $x3682)))
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (and $x3682 $x3676 $x3667)))))
(check-sat)

==> bench/defi163.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 58))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv58 58) (_ bv1 58))) $x212 false)))
(check-sat)

==> bench/defi164.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 58))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (let (($x3743 (bvult C (_ bv58 58))))
 (and $x3743 $x3737 $x231 (not $x3743))))))
(check-sat)

==> bench/defi165.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 58))
(assert
 (let (($x3743 (bvult C (_ bv58 58))))
 (let (($x3728 (not $x3743)))
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (and $x3743 $x3737 $x3728)))))
(check-sat)

==> bench/defi166.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 59))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv59 59) (_ bv1 59))) $x212 false)))
(check-sat)

==> bench/defi167.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 59))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (let (($x3804 (bvult C (_ bv59 59))))
 (and $x3804 $x3798 $x231 (not $x3804))))))
(check-sat)

==> bench/defi168.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 59))
(assert
 (let (($x3804 (bvult C (_ bv59 59))))
 (let (($x3789 (not $x3804)))
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (and $x3804 $x3798 $x3789)))))
(check-sat)

==> bench/defi169.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 60))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv60 60) (_ bv1 60))) $x212 false)))
(check-sat)

==> bench/defi170.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 60))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (let (($x3865 (bvult C (_ bv60 60))))
 (and $x3865 $x3859 $x231 (not $x3865))))))
(check-sat)

==> bench/defi171.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 60))
(assert
 (let (($x3865 (bvult C (_ bv60 60))))
 (let (($x3850 (not $x3865)))
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (and $x3865 $x3859 $x3850)))))
(check-sat)

==> bench/defi172.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 61))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv61 61) (_ bv1 61))) $x212 false)))
(check-sat)

==> bench/defi173.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 61))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (let (($x3926 (bvult C (_ bv61 61))))
 (and $x3926 $x3920 $x231 (not $x3926))))))
(check-sat)

==> bench/defi174.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 61))
(assert
 (let (($x3926 (bvult C (_ bv61 61))))
 (let (($x3911 (not $x3926)))
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (and $x3926 $x3920 $x3911)))))
(check-sat)

==> bench/defi175.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 62))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv62 62) (_ bv1 62))) $x212 false)))
(check-sat)

==> bench/defi176.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 62))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (let (($x3987 (bvult C (_ bv62 62))))
 (and $x3987 $x3981 $x231 (not $x3987))))))
(check-sat)

==> bench/defi177.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 62))
(assert
 (let (($x3987 (bvult C (_ bv62 62))))
 (let (($x3972 (not $x3987)))
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (and $x3987 $x3981 $x3972)))))
(check-sat)

==> bench/defi178.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 63))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv63 63) (_ bv1 63))) $x212 false)))
(check-sat)

==> bench/defi179.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 63))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (let (($x4048 (bvult C (_ bv63 63))))
 (and $x4048 $x4042 $x231 (not $x4048))))))
(check-sat)

==> bench/defi180.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 63))
(assert
 (let (($x4048 (bvult C (_ bv63 63))))
 (let (($x4033 (not $x4048)))
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (and $x4048 $x4042 $x4033)))))
(check-sat)

==> bench/defi181.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 64))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv64 64) (_ bv1 64))) $x212 false)))
(check-sat)

==> bench/defi182.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 64))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (let (($x4108 (bvult C (_ bv64 64))))
 (and $x4108 $x4102 $x231 (not $x4108))))))
(check-sat)

==> bench/defi183.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 64))
(assert
 (let (($x4108 (bvult C (_ bv64 64))))
 (let (($x3957 (not $x4108)))
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (and $x4108 $x4102 $x3957)))))
(check-sat)

==> bench/defi184.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 3))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv3 3) (_ bv1 3))) $x212 false)))
(check-sat)

==> bench/defi185.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 3))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (let (($x4158 (bvult C (_ bv3 3))))
 (and $x4158 $x4156 $x231 (not $x4158))))))
(check-sat)

==> bench/defi186.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 3))
(assert
 (let (($x4158 (bvult C (_ bv3 3))))
 (let (($x3853 (not $x4158)))
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (and $x4158 $x4156 $x3853)))))
(check-sat)

==> bench/defi187.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 2))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (and (= C (bvsub (_ bv2 2) (_ bv1 2))) $x212 false)))
(check-sat)

==> bench/defi188.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 2))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (let (($x4218 (bvult C (_ bv2 2))))
 (and $x4218 $x4212 $x231 (not $x4218))))))
(check-sat)

==> bench/defi189.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 2))
(assert
 (let (($x4218 (bvult C (_ bv2 2))))
 (let (($x4203 (not $x4218)))
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (and $x4218 $x4212 $x4203)))))
(check-sat)

==> bench/fina004.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 4))
(assert
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (and $x355 (and (distinct mem0 mem0) true))))
(check-sat)

==> bench/fina007.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 5))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (and $x142 $x364))))
(check-sat)

==> bench/fina010.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 6))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (and $x599 $x364))))
(check-sat)

==> bench/fina013.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 7))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (and $x660 $x364))))
(check-sat)

==> bench/fina016.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 8))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (and $x412 $x364))))
(check-sat)

==> bench/fina019.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 9))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (and $x369 $x364))))
(check-sat)

==> bench/fina022.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 10))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (and $x810 $x364))))
(check-sat)

==> bench/fina025.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 11))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (and $x871 $x364))))
(check-sat)

==> bench/fina028.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 12))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (and $x932 $x364))))
(check-sat)

==> bench/fina031.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 13))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (and $x993 $x364))))
(check-sat)

==> bench/fina034.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 14))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (and $x1054 $x364))))
(check-sat)

==> bench/fina037.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 15))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (and $x1115 $x364))))
(check-sat)

==> bench/fina040.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 16))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (and $x1177 $x364))))
(check-sat)

==> bench/fina043.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 17))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (and $x1238 $x364))))
(check-sat)

==> bench/fina046.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 18))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (and $x1299 $x364))))
(check-sat)

==> bench/fina049.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 19))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (and $x1360 $x364))))
(check-sat)

==> bench/fina052.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 20))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (and $x1421 $x364))))
(check-sat)

==> bench/fina055.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 21))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (and $x1482 $x364))))
(check-sat)

==> bench/fina058.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 22))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (and $x1543 $x364))))
(check-sat)

==> bench/fina061.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 23))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (and $x1604 $x364))))
(check-sat)

==> bench/fina064.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 24))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (and $x1665 $x364))))
(check-sat)

==> bench/fina067.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 25))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (and $x1726 $x364))))
(check-sat)

==> bench/fina070.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 26))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (and $x1787 $x364))))
(check-sat)

==> bench/fina073.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 27))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (and $x1848 $x364))))
(check-sat)

==> bench/fina076.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 28))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (and $x1909 $x364))))
(check-sat)

==> bench/fina079.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 29))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (and $x1970 $x364))))
(check-sat)

==> bench/fina082.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 30))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (and $x2031 $x364))))
(check-sat)

==> bench/fina085.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 31))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (and $x2092 $x364))))
(check-sat)

==> bench/fina088.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 32))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (and $x2152 $x364))))
(check-sat)

==> bench/fina091.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 33))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (and $x2209 $x364))))
(check-sat)

==> bench/fina094.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 34))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (and $x2273 $x364))))
(check-sat)

==> bench/fina097.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 35))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (and $x2334 $x364))))
(check-sat)

==> bench/fina100.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 36))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (and $x2395 $x364))))
(check-sat)

==> bench/fina103.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 37))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (and $x2456 $x364))))
(check-sat)

==> bench/fina106.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 38))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (and $x2517 $x364))))
(check-sat)

==> bench/fina109.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 39))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (and $x2578 $x364))))
(check-sat)

==> bench/fina112.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 40))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (and $x2639 $x364))))
(check-sat)

==> bench/fina115.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 41))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (and $x2700 $x364))))
(check-sat)

==> bench/fina118.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 42))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (and $x2761 $x364))))
(check-sat)

==> bench/fina121.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 43))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (and $x2822 $x364))))
(check-sat)

==> bench/fina124.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 44))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (and $x2883 $x364))))
(check-sat)

==> bench/fina127.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 45))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (and $x2944 $x364))))
(check-sat)

==> bench/fina130.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 46))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (and $x3005 $x364))))
(check-sat)

==> bench/fina133.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 47))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (and $x3066 $x364))))
(check-sat)

==> bench/fina136.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 48))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (and $x3127 $x364))))
(check-sat)

==> bench/fina139.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 49))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (and $x3188 $x364))))
(check-sat)

==> bench/fina142.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 50))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (and $x3249 $x364))))
(check-sat)

==> bench/fina145.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 51))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (and $x3310 $x364))))
(check-sat)

==> bench/fina148.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 52))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (and $x3371 $x364))))
(check-sat)

==> bench/fina151.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 53))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (and $x3432 $x364))))
(check-sat)

==> bench/fina154.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 54))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (and $x3493 $x364))))
(check-sat)

==> bench/fina157.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 55))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (and $x3554 $x364))))
(check-sat)

==> bench/fina160.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 56))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (and $x3615 $x364))))
(check-sat)

==> bench/fina163.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 57))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (and $x3676 $x364))))
(check-sat)

==> bench/fina166.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 58))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (and $x3737 $x364))))
(check-sat)

==> bench/fina169.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 59))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (and $x3798 $x364))))
(check-sat)

==> bench/fina172.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 60))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (and $x3859 $x364))))
(check-sat)

==> bench/fina175.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 61))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (and $x3920 $x364))))
(check-sat)

==> bench/fina178.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 62))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (and $x3981 $x364))))
(check-sat)

==> bench/fina181.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 63))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (and $x4042 $x364))))
(check-sat)

==> bench/fina184.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 64))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (and $x4102 $x364))))
(check-sat)

==> bench/fina187.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 3))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (and $x4156 $x364))))
(check-sat)

==> bench/fina190.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 2))
(assert
 (let (($x364 (and (distinct mem0 mem0) true)))
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (and $x4212 $x364))))
(check-sat)

==> bench/pois002.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 4))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (let (($x141 (bvult C (_ bv4 4))))
 (and $x141 $x355 $x231 false)))))
(check-sat)

==> bench/pois003.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 4))
(assert
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (let (($x141 (bvult C (_ bv4 4))))
 (and $x141 $x355 false))))
(check-sat)

==> bench/pois005.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 5))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (let (($x310 (bvult C (_ bv5 5))))
 (and $x310 $x142 $x231 false)))))
(check-sat)

==> bench/pois006.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 5))
(assert
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (let (($x310 (bvult C (_ bv5 5))))
 (and $x310 $x142 false))))
(check-sat)

==> bench/pois008.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 6))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (let (($x605 (bvult C (_ bv6 6))))
 (and $x605 $x599 $x231 false)))))
(check-sat)

==> bench/pois009.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 6))
(assert
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (let (($x605 (bvult C (_ bv6 6))))
 (and $x605 $x599 false))))
(check-sat)

==> bench/pois011.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 7))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (let (($x666 (bvult C (_ bv7 7))))
 (and $x666 $x660 $x231 false)))))
(check-sat)

==> bench/pois012.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 7))
(assert
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (let (($x666 (bvult C (_ bv7 7))))
 (and $x666 $x660 false))))
(check-sat)

==> bench/pois014.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (let (($x727 (bvult C (_ bv8 8))))
 (and $x727 $x412 $x231 false)))))
(check-sat)

==> bench/pois015.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 8))
(assert
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (let (($x727 (bvult C (_ bv8 8))))
 (and $x727 $x412 false))))
(check-sat)

==> bench/pois017.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 9))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (let (($x573 (bvult C (_ bv9 9))))
 (and $x573 $x369 $x231 false)))))
(check-sat)

==> bench/pois018.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 9))
(assert
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (let (($x573 (bvult C (_ bv9 9))))
 (and $x573 $x369 false))))
(check-sat)

==> bench/pois020.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 10))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (let (($x816 (bvult C (_ bv10 10))))
 (and $x816 $x810 $x231 false)))))
(check-sat)

==> bench/pois021.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 10))
(assert
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (let (($x816 (bvult C (_ bv10 10))))
 (and $x816 $x810 false))))
(check-sat)

==> bench/pois023.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 11))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (let (($x877 (bvult C (_ bv11 11))))
 (and $x877 $x871 $x231 false)))))
(check-sat)

==> bench/pois024.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 11))
(assert
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (let (($x877 (bvult C (_ bv11 11))))
 (and $x877 $x871 false))))
(check-sat)

==> bench/pois026.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 12))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (let (($x938 (bvult C (_ bv12 12))))
 (and $x938 $x932 $x231 false)))))
(check-sat)

==> bench/pois027.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 12))
(assert
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (let (($x938 (bvult C (_ bv12 12))))
 (and $x938 $x932 false))))
(check-sat)

==> bench/pois029.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 13))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (let (($x999 (bvult C (_ bv13 13))))
 (and $x999 $x993 $x231 false)))))
(check-sat)

==> bench/pois030.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 13))
(assert
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (let (($x999 (bvult C (_ bv13 13))))
 (and $x999 $x993 false))))
(check-sat)

==> bench/pois032.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 14))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (let (($x1060 (bvult C (_ bv14 14))))
 (and $x1060 $x1054 $x231 false)))))
(check-sat)

==> bench/pois033.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 14))
(assert
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (let (($x1060 (bvult C (_ bv14 14))))
 (and $x1060 $x1054 false))))
(check-sat)

==> bench/pois035.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 15))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (let (($x1121 (bvult C (_ bv15 15))))
 (and $x1121 $x1115 $x231 false)))))
(check-sat)

==> bench/pois036.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 15))
(assert
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (let (($x1121 (bvult C (_ bv15 15))))
 (and $x1121 $x1115 false))))
(check-sat)

==> bench/pois038.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 16))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (let (($x1183 (bvult C (_ bv16 16))))
 (and $x1183 $x1177 $x231 false)))))
(check-sat)

==> bench/pois039.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 16))
(assert
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (let (($x1183 (bvult C (_ bv16 16))))
 (and $x1183 $x1177 false))))
(check-sat)

==> bench/pois041.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 17))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (let (($x1244 (bvult C (_ bv17 17))))
 (and $x1244 $x1238 $x231 false)))))
(check-sat)

==> bench/pois042.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 17))
(assert
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (let (($x1244 (bvult C (_ bv17 17))))
 (and $x1244 $x1238 false))))
(check-sat)

==> bench/pois044.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 18))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (let (($x1305 (bvult C (_ bv18 18))))
 (and $x1305 $x1299 $x231 false)))))
(check-sat)

==> bench/pois045.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 18))
(assert
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (let (($x1305 (bvult C (_ bv18 18))))
 (and $x1305 $x1299 false))))
(check-sat)

==> bench/pois047.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 19))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (let (($x1366 (bvult C (_ bv19 19))))
 (and $x1366 $x1360 $x231 false)))))
(check-sat)

==> bench/pois048.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 19))
(assert
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (let (($x1366 (bvult C (_ bv19 19))))
 (and $x1366 $x1360 false))))
(check-sat)

==> bench/pois050.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 20))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (let (($x1427 (bvult C (_ bv20 20))))
 (and $x1427 $x1421 $x231 false)))))
(check-sat)

==> bench/pois051.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 20))
(assert
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (let (($x1427 (bvult C (_ bv20 20))))
 (and $x1427 $x1421 false))))
(check-sat)

==> bench/pois053.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 21))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (let (($x1488 (bvult C (_ bv21 21))))
 (and $x1488 $x1482 $x231 false)))))
(check-sat)

==> bench/pois054.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 21))
(assert
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (let (($x1488 (bvult C (_ bv21 21))))
 (and $x1488 $x1482 false))))
(check-sat)

==> bench/pois056.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 22))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (let (($x1549 (bvult C (_ bv22 22))))
 (and $x1549 $x1543 $x231 false)))))
(check-sat)

==> bench/pois057.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 22))
(assert
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (let (($x1549 (bvult C (_ bv22 22))))
 (and $x1549 $x1543 false))))
(check-sat)

==> bench/pois059.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 23))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (let (($x1610 (bvult C (_ bv23 23))))
 (and $x1610 $x1604 $x231 false)))))
(check-sat)

==> bench/pois060.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 23))
(assert
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (let (($x1610 (bvult C (_ bv23 23))))
 (and $x1610 $x1604 false))))
(check-sat)

==> bench/pois062.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 24))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (let (($x1671 (bvult C (_ bv24 24))))
 (and $x1671 $x1665 $x231 false)))))
(check-sat)

==> bench/pois063.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 24))
(assert
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (let (($x1671 (bvult C (_ bv24 24))))
 (and $x1671 $x1665 false))))
(check-sat)

==> bench/pois065.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 25))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (let (($x1732 (bvult C (_ bv25 25))))
 (and $x1732 $x1726 $x231 false)))))
(check-sat)

==> bench/pois066.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 25))
(assert
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (let (($x1732 (bvult C (_ bv25 25))))
 (and $x1732 $x1726 false))))
(check-sat)

==> bench/pois068.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 26))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (let (($x1793 (bvult C (_ bv26 26))))
 (and $x1793 $x1787 $x231 false)))))
(check-sat)

==> bench/pois069.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 26))
(assert
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (let (($x1793 (bvult C (_ bv26 26))))
 (and $x1793 $x1787 false))))
(check-sat)

==> bench/pois071.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 27))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (let (($x1854 (bvult C (_ bv27 27))))
 (and $x1854 $x1848 $x231 false)))))
(check-sat)

==> bench/pois072.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 27))
(assert
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (let (($x1854 (bvult C (_ bv27 27))))
 (and $x1854 $x1848 false))))
(check-sat)

==> bench/pois074.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 28))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (let (($x1915 (bvult C (_ bv28 28))))
 (and $x1915 $x1909 $x231 false)))))
(check-sat)

==> bench/pois075.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 28))
(assert
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (let (($x1915 (bvult C (_ bv28 28))))
 (and $x1915 $x1909 false))))
(check-sat)

==> bench/pois077.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 29))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (let (($x1976 (bvult C (_ bv29 29))))
 (and $x1976 $x1970 $x231 false)))))
(check-sat)

==> bench/pois078.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 29))
(assert
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (let (($x1976 (bvult C (_ bv29 29))))
 (and $x1976 $x1970 false))))
(check-sat)

==> bench/pois080.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 30))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (let (($x2037 (bvult C (_ bv30 30))))
 (and $x2037 $x2031 $x231 false)))))
(check-sat)

==> bench/pois081.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 30))
(assert
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (let (($x2037 (bvult C (_ bv30 30))))
 (and $x2037 $x2031 false))))
(check-sat)

==> bench/pois083.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 31))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (let (($x2098 (bvult C (_ bv31 31))))
 (and $x2098 $x2092 $x231 false)))))
(check-sat)

==> bench/pois084.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 31))
(assert
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (let (($x2098 (bvult C (_ bv31 31))))
 (and $x2098 $x2092 false))))
(check-sat)

==> bench/pois086.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 32))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (let (($x2158 (bvult C (_ bv32 32))))
 (and $x2158 $x2152 $x231 false)))))
(check-sat)

==> bench/pois087.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 32))
(assert
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (let (($x2158 (bvult C (_ bv32 32))))
 (and $x2158 $x2152 false))))
(check-sat)

==> bench/pois089.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 33))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (let (($x2215 (bvult C (_ bv33 33))))
 (and $x2215 $x2209 $x231 false)))))
(check-sat)

==> bench/pois090.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 33))
(assert
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (let (($x2215 (bvult C (_ bv33 33))))
 (and $x2215 $x2209 false))))
(check-sat)

==> bench/pois092.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 34))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (let (($x2279 (bvult C (_ bv34 34))))
 (and $x2279 $x2273 $x231 false)))))
(check-sat)

==> bench/pois093.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 34))
(assert
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (let (($x2279 (bvult C (_ bv34 34))))
 (and $x2279 $x2273 false))))
(check-sat)

==> bench/pois095.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 35))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (let (($x2340 (bvult C (_ bv35 35))))
 (and $x2340 $x2334 $x231 false)))))
(check-sat)

==> bench/pois096.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 35))
(assert
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (let (($x2340 (bvult C (_ bv35 35))))
 (and $x2340 $x2334 false))))
(check-sat)

==> bench/pois098.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 36))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (let (($x2401 (bvult C (_ bv36 36))))
 (and $x2401 $x2395 $x231 false)))))
(check-sat)

==> bench/pois099.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 36))
(assert
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (let (($x2401 (bvult C (_ bv36 36))))
 (and $x2401 $x2395 false))))
(check-sat)

==> bench/pois101.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 37))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (let (($x2462 (bvult C (_ bv37 37))))
 (and $x2462 $x2456 $x231 false)))))
(check-sat)

==> bench/pois102.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 37))
(assert
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (let (($x2462 (bvult C (_ bv37 37))))
 (and $x2462 $x2456 false))))
(check-sat)

==> bench/pois104.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 38))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (let (($x2523 (bvult C (_ bv38 38))))
 (and $x2523 $x2517 $x231 false)))))
(check-sat)

==> bench/pois105.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 38))
(assert
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (let (($x2523 (bvult C (_ bv38 38))))
 (and $x2523 $x2517 false))))
(check-sat)

==> bench/pois107.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 39))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (let (($x2584 (bvult C (_ bv39 39))))
 (and $x2584 $x2578 $x231 false)))))
(check-sat)

==> bench/pois108.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 39))
(assert
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (let (($x2584 (bvult C (_ bv39 39))))
 (and $x2584 $x2578 false))))
(check-sat)

==> bench/pois110.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 40))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (let (($x2645 (bvult C (_ bv40 40))))
 (and $x2645 $x2639 $x231 false)))))
(check-sat)

==> bench/pois111.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 40))
(assert
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (let (($x2645 (bvult C (_ bv40 40))))
 (and $x2645 $x2639 false))))
(check-sat)

==> bench/pois113.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 41))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (let (($x2706 (bvult C (_ bv41 41))))
 (and $x2706 $x2700 $x231 false)))))
(check-sat)

==> bench/pois114.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 41))
(assert
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (let (($x2706 (bvult C (_ bv41 41))))
 (and $x2706 $x2700 false))))
(check-sat)

==> bench/pois116.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 42))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (let (($x2767 (bvult C (_ bv42 42))))
 (and $x2767 $x2761 $x231 false)))))
(check-sat)

==> bench/pois117.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 42))
(assert
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (let (($x2767 (bvult C (_ bv42 42))))
 (and $x2767 $x2761 false))))
(check-sat)

==> bench/pois119.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 43))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (let (($x2828 (bvult C (_ bv43 43))))
 (and $x2828 $x2822 $x231 false)))))
(check-sat)

==> bench/pois120.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 43))
(assert
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (let (($x2828 (bvult C (_ bv43 43))))
 (and $x2828 $x2822 false))))
(check-sat)

==> bench/pois122.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 44))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (let (($x2889 (bvult C (_ bv44 44))))
 (and $x2889 $x2883 $x231 false)))))
(check-sat)

==> bench/pois123.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 44))
(assert
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (let (($x2889 (bvult C (_ bv44 44))))
 (and $x2889 $x2883 false))))
(check-sat)

==> bench/pois125.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 45))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (let (($x2950 (bvult C (_ bv45 45))))
 (and $x2950 $x2944 $x231 false)))))
(check-sat)

==> bench/pois126.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 45))
(assert
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (let (($x2950 (bvult C (_ bv45 45))))
 (and $x2950 $x2944 false))))
(check-sat)

==> bench/pois128.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 46))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (let (($x3011 (bvult C (_ bv46 46))))
 (and $x3011 $x3005 $x231 false)))))
(check-sat)

==> bench/pois129.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 46))
(assert
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (let (($x3011 (bvult C (_ bv46 46))))
 (and $x3011 $x3005 false))))
(check-sat)

==> bench/pois131.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 47))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (let (($x3072 (bvult C (_ bv47 47))))
 (and $x3072 $x3066 $x231 false)))))
(check-sat)

==> bench/pois132.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 47))
(assert
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (let (($x3072 (bvult C (_ bv47 47))))
 (and $x3072 $x3066 false))))
(check-sat)

==> bench/pois134.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 48))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (let (($x3133 (bvult C (_ bv48 48))))
 (and $x3133 $x3127 $x231 false)))))
(check-sat)

==> bench/pois135.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 48))
(assert
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (let (($x3133 (bvult C (_ bv48 48))))
 (and $x3133 $x3127 false))))
(check-sat)

==> bench/pois137.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 49))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (let (($x3194 (bvult C (_ bv49 49))))
 (and $x3194 $x3188 $x231 false)))))
(check-sat)

==> bench/pois138.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 49))
(assert
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (let (($x3194 (bvult C (_ bv49 49))))
 (and $x3194 $x3188 false))))
(check-sat)

==> bench/pois140.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 50))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (let (($x3255 (bvult C (_ bv50 50))))
 (and $x3255 $x3249 $x231 false)))))
(check-sat)

==> bench/pois141.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 50))
(assert
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (let (($x3255 (bvult C (_ bv50 50))))
 (and $x3255 $x3249 false))))
(check-sat)

==> bench/pois143.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 51))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (let (($x3316 (bvult C (_ bv51 51))))
 (and $x3316 $x3310 $x231 false)))))
(check-sat)

==> bench/pois144.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 51))
(assert
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (let (($x3316 (bvult C (_ bv51 51))))
 (and $x3316 $x3310 false))))
(check-sat)

==> bench/pois146.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 52))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (let (($x3377 (bvult C (_ bv52 52))))
 (and $x3377 $x3371 $x231 false)))))
(check-sat)

==> bench/pois147.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 52))
(assert
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (let (($x3377 (bvult C (_ bv52 52))))
 (and $x3377 $x3371 false))))
(check-sat)

==> bench/pois149.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 53))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (let (($x3438 (bvult C (_ bv53 53))))
 (and $x3438 $x3432 $x231 false)))))
(check-sat)

==> bench/pois150.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 53))
(assert
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (let (($x3438 (bvult C (_ bv53 53))))
 (and $x3438 $x3432 false))))
(check-sat)

==> bench/pois152.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 54))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (let (($x3499 (bvult C (_ bv54 54))))
 (and $x3499 $x3493 $x231 false)))))
(check-sat)

==> bench/pois153.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 54))
(assert
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (let (($x3499 (bvult C (_ bv54 54))))
 (and $x3499 $x3493 false))))
(check-sat)

==> bench/pois155.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 55))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (let (($x3560 (bvult C (_ bv55 55))))
 (and $x3560 $x3554 $x231 false)))))
(check-sat)

==> bench/pois156.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 55))
(assert
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (let (($x3560 (bvult C (_ bv55 55))))
 (and $x3560 $x3554 false))))
(check-sat)

==> bench/pois158.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 56))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (let (($x3621 (bvult C (_ bv56 56))))
 (and $x3621 $x3615 $x231 false)))))
(check-sat)

==> bench/pois159.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 56))
(assert
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (let (($x3621 (bvult C (_ bv56 56))))
 (and $x3621 $x3615 false))))
(check-sat)

==> bench/pois161.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 57))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (let (($x3682 (bvult C (_ bv57 57))))
 (and $x3682 $x3676 $x231 false)))))
(check-sat)

==> bench/pois162.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 57))
(assert
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (let (($x3682 (bvult C (_ bv57 57))))
 (and $x3682 $x3676 false))))
(check-sat)

==> bench/pois164.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 58))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (let (($x3743 (bvult C (_ bv58 58))))
 (and $x3743 $x3737 $x231 false)))))
(check-sat)

==> bench/pois165.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 58))
(assert
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (let (($x3743 (bvult C (_ bv58 58))))
 (and $x3743 $x3737 false))))
(check-sat)

==> bench/pois167.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 59))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (let (($x3804 (bvult C (_ bv59 59))))
 (and $x3804 $x3798 $x231 false)))))
(check-sat)

==> bench/pois168.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 59))
(assert
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (let (($x3804 (bvult C (_ bv59 59))))
 (and $x3804 $x3798 false))))
(check-sat)

==> bench/pois170.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 60))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (let (($x3865 (bvult C (_ bv60 60))))
 (and $x3865 $x3859 $x231 false)))))
(check-sat)

==> bench/pois171.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 60))
(assert
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (let (($x3865 (bvult C (_ bv60 60))))
 (and $x3865 $x3859 false))))
(check-sat)

==> bench/pois173.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 61))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (let (($x3926 (bvult C (_ bv61 61))))
 (and $x3926 $x3920 $x231 false)))))
(check-sat)

==> bench/pois174.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 61))
(assert
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (let (($x3926 (bvult C (_ bv61 61))))
 (and $x3926 $x3920 false))))
(check-sat)

==> bench/pois176.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 62))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (let (($x3987 (bvult C (_ bv62 62))))
 (and $x3987 $x3981 $x231 false)))))
(check-sat)

==> bench/pois177.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 62))
(assert
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (let (($x3987 (bvult C (_ bv62 62))))
 (and $x3987 $x3981 false))))
(check-sat)

==> bench/pois179.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 63))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (let (($x4048 (bvult C (_ bv63 63))))
 (and $x4048 $x4042 $x231 false)))))
(check-sat)

==> bench/pois180.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 63))
(assert
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (let (($x4048 (bvult C (_ bv63 63))))
 (and $x4048 $x4042 false))))
(check-sat)

==> bench/pois182.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 64))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (let (($x4108 (bvult C (_ bv64 64))))
 (and $x4108 $x4102 $x231 false)))))
(check-sat)

==> bench/pois183.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 64))
(assert
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (let (($x4108 (bvult C (_ bv64 64))))
 (and $x4108 $x4102 false))))
(check-sat)

==> bench/pois185.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 3))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (let (($x4158 (bvult C (_ bv3 3))))
 (and $x4158 $x4156 $x231 false)))))
(check-sat)

==> bench/pois186.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 3))
(assert
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (let (($x4158 (bvult C (_ bv3 3))))
 (and $x4158 $x4156 false))))
(check-sat)

==> bench/pois188.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%a () (_ BitVec 8))
(declare-fun C () (_ BitVec 2))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (let (($x4218 (bvult C (_ bv2 2))))
 (and $x4218 $x4212 $x231 false)))))
(check-sat)

==> bench/pois189.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 2))
(assert
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (let (($x4218 (bvult C (_ bv2 2))))
 (and $x4218 $x4212 false))))
(check-sat)

==> bench/valu001.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 4))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 4))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (and $x355 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu002.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 4))
(declare-fun %x () (_ BitVec 4))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (let (($x141 (bvult C (_ bv4 4))))
 (and $x141 $x355 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu003.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 4))
(declare-fun %x () (_ BitVec 4))
(assert
 (let (($x355 (= C (bvsub (_ bv4 4) (_ bv1 4)))))
 (let (($x141 (bvult C (_ bv4 4))))
 (and $x141 $x355 (and (distinct (bvsub (_ bv0 4) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu004.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 5))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 5))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (and $x142 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu005.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 5))
(declare-fun %x () (_ BitVec 5))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (let (($x310 (bvult C (_ bv5 5))))
 (and $x310 $x142 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu006.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 5))
(declare-fun %x () (_ BitVec 5))
(assert
 (let (($x142 (= C (bvsub (_ bv5 5) (_ bv1 5)))))
 (let (($x310 (bvult C (_ bv5 5))))
 (and $x310 $x142 (and (distinct (bvsub (_ bv0 5) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu007.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 6))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 6))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (and $x599 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu008.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 6))
(declare-fun %x () (_ BitVec 6))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (let (($x605 (bvult C (_ bv6 6))))
 (and $x605 $x599 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu009.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 6))
(declare-fun %x () (_ BitVec 6))
(assert
 (let (($x599 (= C (bvsub (_ bv6 6) (_ bv1 6)))))
 (let (($x605 (bvult C (_ bv6 6))))
 (and $x605 $x599 (and (distinct (bvsub (_ bv0 6) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu010.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 7))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 7))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (and $x660 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu011.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 7))
(declare-fun %x () (_ BitVec 7))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (let (($x666 (bvult C (_ bv7 7))))
 (and $x666 $x660 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu012.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 7))
(declare-fun %x () (_ BitVec 7))
(assert
 (let (($x660 (= C (bvsub (_ bv7 7) (_ bv1 7)))))
 (let (($x666 (bvult C (_ bv7 7))))
 (and $x666 $x660 (and (distinct (bvsub (_ bv0 7) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu013.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 8))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 8))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (and $x412 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu014.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 8))
(declare-fun %x () (_ BitVec 8))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (let (($x727 (bvult C (_ bv8 8))))
 (and $x727 $x412 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu015.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 8))
(declare-fun %x () (_ BitVec 8))
(assert
 (let (($x412 (= C (bvsub (_ bv8 8) (_ bv1 8)))))
 (let (($x727 (bvult C (_ bv8 8))))
 (and $x727 $x412 (and (distinct (bvsub (_ bv0 8) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu016.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 9))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 9))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (and $x369 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu017.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 9))
(declare-fun %x () (_ BitVec 9))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (let (($x573 (bvult C (_ bv9 9))))
 (and $x573 $x369 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu018.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 9))
(declare-fun %x () (_ BitVec 9))
(assert
 (let (($x369 (= C (bvsub (_ bv9 9) (_ bv1 9)))))
 (let (($x573 (bvult C (_ bv9 9))))
 (and $x573 $x369 (and (distinct (bvsub (_ bv0 9) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu019.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 10))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 10))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (and $x810 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu020.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 10))
(declare-fun %x () (_ BitVec 10))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (let (($x816 (bvult C (_ bv10 10))))
 (and $x816 $x810 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu021.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 10))
(declare-fun %x () (_ BitVec 10))
(assert
 (let (($x810 (= C (bvsub (_ bv10 10) (_ bv1 10)))))
 (let (($x816 (bvult C (_ bv10 10))))
 (and $x816 $x810 (and (distinct (bvsub (_ bv0 10) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu022.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 11))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 11))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (and $x871 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu023.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 11))
(declare-fun %x () (_ BitVec 11))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (let (($x877 (bvult C (_ bv11 11))))
 (and $x877 $x871 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu024.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 11))
(declare-fun %x () (_ BitVec 11))
(assert
 (let (($x871 (= C (bvsub (_ bv11 11) (_ bv1 11)))))
 (let (($x877 (bvult C (_ bv11 11))))
 (and $x877 $x871 (and (distinct (bvsub (_ bv0 11) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu025.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 12))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 12))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (and $x932 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu026.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 12))
(declare-fun %x () (_ BitVec 12))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (let (($x938 (bvult C (_ bv12 12))))
 (and $x938 $x932 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu027.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 12))
(declare-fun %x () (_ BitVec 12))
(assert
 (let (($x932 (= C (bvsub (_ bv12 12) (_ bv1 12)))))
 (let (($x938 (bvult C (_ bv12 12))))
 (and $x938 $x932 (and (distinct (bvsub (_ bv0 12) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu028.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 13))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 13))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (and $x993 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu029.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 13))
(declare-fun %x () (_ BitVec 13))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (let (($x999 (bvult C (_ bv13 13))))
 (and $x999 $x993 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu030.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 13))
(declare-fun %x () (_ BitVec 13))
(assert
 (let (($x993 (= C (bvsub (_ bv13 13) (_ bv1 13)))))
 (let (($x999 (bvult C (_ bv13 13))))
 (and $x999 $x993 (and (distinct (bvsub (_ bv0 13) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu031.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 14))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 14))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (and $x1054 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu032.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 14))
(declare-fun %x () (_ BitVec 14))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (let (($x1060 (bvult C (_ bv14 14))))
 (and $x1060 $x1054 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu033.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 14))
(declare-fun %x () (_ BitVec 14))
(assert
 (let (($x1054 (= C (bvsub (_ bv14 14) (_ bv1 14)))))
 (let (($x1060 (bvult C (_ bv14 14))))
 (and $x1060 $x1054 (and (distinct (bvsub (_ bv0 14) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu034.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 15))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 15))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (and $x1115 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu035.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 15))
(declare-fun %x () (_ BitVec 15))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (let (($x1121 (bvult C (_ bv15 15))))
 (and $x1121 $x1115 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu036.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 15))
(declare-fun %x () (_ BitVec 15))
(assert
 (let (($x1115 (= C (bvsub (_ bv15 15) (_ bv1 15)))))
 (let (($x1121 (bvult C (_ bv15 15))))
 (and $x1121 $x1115 (and (distinct (bvsub (_ bv0 15) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu037.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 16))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 16))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (and $x1177 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu038.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 16))
(declare-fun %x () (_ BitVec 16))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (let (($x1183 (bvult C (_ bv16 16))))
 (and $x1183 $x1177 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu039.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 16))
(declare-fun %x () (_ BitVec 16))
(assert
 (let (($x1177 (= C (bvsub (_ bv16 16) (_ bv1 16)))))
 (let (($x1183 (bvult C (_ bv16 16))))
 (and $x1183 $x1177 (and (distinct (bvsub (_ bv0 16) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu040.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 17))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 17))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (and $x1238 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu041.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 17))
(declare-fun %x () (_ BitVec 17))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (let (($x1244 (bvult C (_ bv17 17))))
 (and $x1244 $x1238 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu042.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 17))
(declare-fun %x () (_ BitVec 17))
(assert
 (let (($x1238 (= C (bvsub (_ bv17 17) (_ bv1 17)))))
 (let (($x1244 (bvult C (_ bv17 17))))
 (and $x1244 $x1238 (and (distinct (bvsub (_ bv0 17) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu043.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 18))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 18))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (and $x1299 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu044.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 18))
(declare-fun %x () (_ BitVec 18))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (let (($x1305 (bvult C (_ bv18 18))))
 (and $x1305 $x1299 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu045.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 18))
(declare-fun %x () (_ BitVec 18))
(assert
 (let (($x1299 (= C (bvsub (_ bv18 18) (_ bv1 18)))))
 (let (($x1305 (bvult C (_ bv18 18))))
 (and $x1305 $x1299 (and (distinct (bvsub (_ bv0 18) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu046.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 19))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 19))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (and $x1360 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu047.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 19))
(declare-fun %x () (_ BitVec 19))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (let (($x1366 (bvult C (_ bv19 19))))
 (and $x1366 $x1360 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu048.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 19))
(declare-fun %x () (_ BitVec 19))
(assert
 (let (($x1360 (= C (bvsub (_ bv19 19) (_ bv1 19)))))
 (let (($x1366 (bvult C (_ bv19 19))))
 (and $x1366 $x1360 (and (distinct (bvsub (_ bv0 19) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu049.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 20))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 20))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (and $x1421 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu050.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 20))
(declare-fun %x () (_ BitVec 20))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (let (($x1427 (bvult C (_ bv20 20))))
 (and $x1427 $x1421 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu051.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 20))
(declare-fun %x () (_ BitVec 20))
(assert
 (let (($x1421 (= C (bvsub (_ bv20 20) (_ bv1 20)))))
 (let (($x1427 (bvult C (_ bv20 20))))
 (and $x1427 $x1421 (and (distinct (bvsub (_ bv0 20) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu052.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 21))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 21))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (and $x1482 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu053.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 21))
(declare-fun %x () (_ BitVec 21))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (let (($x1488 (bvult C (_ bv21 21))))
 (and $x1488 $x1482 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu054.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 21))
(declare-fun %x () (_ BitVec 21))
(assert
 (let (($x1482 (= C (bvsub (_ bv21 21) (_ bv1 21)))))
 (let (($x1488 (bvult C (_ bv21 21))))
 (and $x1488 $x1482 (and (distinct (bvsub (_ bv0 21) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu055.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 22))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 22))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (and $x1543 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu056.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 22))
(declare-fun %x () (_ BitVec 22))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (let (($x1549 (bvult C (_ bv22 22))))
 (and $x1549 $x1543 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu057.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 22))
(declare-fun %x () (_ BitVec 22))
(assert
 (let (($x1543 (= C (bvsub (_ bv22 22) (_ bv1 22)))))
 (let (($x1549 (bvult C (_ bv22 22))))
 (and $x1549 $x1543 (and (distinct (bvsub (_ bv0 22) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu058.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 23))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 23))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (and $x1604 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu059.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 23))
(declare-fun %x () (_ BitVec 23))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (let (($x1610 (bvult C (_ bv23 23))))
 (and $x1610 $x1604 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu060.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 23))
(declare-fun %x () (_ BitVec 23))
(assert
 (let (($x1604 (= C (bvsub (_ bv23 23) (_ bv1 23)))))
 (let (($x1610 (bvult C (_ bv23 23))))
 (and $x1610 $x1604 (and (distinct (bvsub (_ bv0 23) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu061.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 24))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 24))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (and $x1665 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu062.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 24))
(declare-fun %x () (_ BitVec 24))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (let (($x1671 (bvult C (_ bv24 24))))
 (and $x1671 $x1665 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu063.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 24))
(declare-fun %x () (_ BitVec 24))
(assert
 (let (($x1665 (= C (bvsub (_ bv24 24) (_ bv1 24)))))
 (let (($x1671 (bvult C (_ bv24 24))))
 (and $x1671 $x1665 (and (distinct (bvsub (_ bv0 24) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu064.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 25))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 25))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (and $x1726 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu065.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 25))
(declare-fun %x () (_ BitVec 25))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (let (($x1732 (bvult C (_ bv25 25))))
 (and $x1732 $x1726 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu066.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 25))
(declare-fun %x () (_ BitVec 25))
(assert
 (let (($x1726 (= C (bvsub (_ bv25 25) (_ bv1 25)))))
 (let (($x1732 (bvult C (_ bv25 25))))
 (and $x1732 $x1726 (and (distinct (bvsub (_ bv0 25) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu067.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 26))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 26))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (and $x1787 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu068.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 26))
(declare-fun %x () (_ BitVec 26))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (let (($x1793 (bvult C (_ bv26 26))))
 (and $x1793 $x1787 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu069.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 26))
(declare-fun %x () (_ BitVec 26))
(assert
 (let (($x1787 (= C (bvsub (_ bv26 26) (_ bv1 26)))))
 (let (($x1793 (bvult C (_ bv26 26))))
 (and $x1793 $x1787 (and (distinct (bvsub (_ bv0 26) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu070.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 27))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 27))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (and $x1848 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu071.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 27))
(declare-fun %x () (_ BitVec 27))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (let (($x1854 (bvult C (_ bv27 27))))
 (and $x1854 $x1848 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu072.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 27))
(declare-fun %x () (_ BitVec 27))
(assert
 (let (($x1848 (= C (bvsub (_ bv27 27) (_ bv1 27)))))
 (let (($x1854 (bvult C (_ bv27 27))))
 (and $x1854 $x1848 (and (distinct (bvsub (_ bv0 27) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu073.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 28))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 28))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (and $x1909 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu074.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 28))
(declare-fun %x () (_ BitVec 28))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (let (($x1915 (bvult C (_ bv28 28))))
 (and $x1915 $x1909 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu075.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 28))
(declare-fun %x () (_ BitVec 28))
(assert
 (let (($x1909 (= C (bvsub (_ bv28 28) (_ bv1 28)))))
 (let (($x1915 (bvult C (_ bv28 28))))
 (and $x1915 $x1909 (and (distinct (bvsub (_ bv0 28) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu076.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 29))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 29))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (and $x1970 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu077.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 29))
(declare-fun %x () (_ BitVec 29))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (let (($x1976 (bvult C (_ bv29 29))))
 (and $x1976 $x1970 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu078.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 29))
(declare-fun %x () (_ BitVec 29))
(assert
 (let (($x1970 (= C (bvsub (_ bv29 29) (_ bv1 29)))))
 (let (($x1976 (bvult C (_ bv29 29))))
 (and $x1976 $x1970 (and (distinct (bvsub (_ bv0 29) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu079.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 30))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 30))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (and $x2031 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu080.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 30))
(declare-fun %x () (_ BitVec 30))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (let (($x2037 (bvult C (_ bv30 30))))
 (and $x2037 $x2031 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu081.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 30))
(declare-fun %x () (_ BitVec 30))
(assert
 (let (($x2031 (= C (bvsub (_ bv30 30) (_ bv1 30)))))
 (let (($x2037 (bvult C (_ bv30 30))))
 (and $x2037 $x2031 (and (distinct (bvsub (_ bv0 30) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu082.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 31))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 31))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (and $x2092 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu083.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 31))
(declare-fun %x () (_ BitVec 31))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (let (($x2098 (bvult C (_ bv31 31))))
 (and $x2098 $x2092 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu084.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 31))
(declare-fun %x () (_ BitVec 31))
(assert
 (let (($x2092 (= C (bvsub (_ bv31 31) (_ bv1 31)))))
 (let (($x2098 (bvult C (_ bv31 31))))
 (and $x2098 $x2092 (and (distinct (bvsub (_ bv0 31) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu085.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 32))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 32))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (and $x2152 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu086.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 32))
(declare-fun %x () (_ BitVec 32))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (let (($x2158 (bvult C (_ bv32 32))))
 (and $x2158 $x2152 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu087.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 32))
(declare-fun %x () (_ BitVec 32))
(assert
 (let (($x2152 (= C (bvsub (_ bv32 32) (_ bv1 32)))))
 (let (($x2158 (bvult C (_ bv32 32))))
 (and $x2158 $x2152 (and (distinct (bvsub (_ bv0 32) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu088.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 33))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 33))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (and $x2209 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu089.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 33))
(declare-fun %x () (_ BitVec 33))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (let (($x2215 (bvult C (_ bv33 33))))
 (and $x2215 $x2209 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu090.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 33))
(declare-fun %x () (_ BitVec 33))
(assert
 (let (($x2209 (= C (bvsub (_ bv33 33) (_ bv1 33)))))
 (let (($x2215 (bvult C (_ bv33 33))))
 (and $x2215 $x2209 (and (distinct (bvsub (_ bv0 33) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu091.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 34))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 34))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (and $x2273 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu092.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 34))
(declare-fun %x () (_ BitVec 34))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (let (($x2279 (bvult C (_ bv34 34))))
 (and $x2279 $x2273 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu093.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 34))
(declare-fun %x () (_ BitVec 34))
(assert
 (let (($x2273 (= C (bvsub (_ bv34 34) (_ bv1 34)))))
 (let (($x2279 (bvult C (_ bv34 34))))
 (and $x2279 $x2273 (and (distinct (bvsub (_ bv0 34) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu094.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 35))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 35))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (and $x2334 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu095.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 35))
(declare-fun %x () (_ BitVec 35))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (let (($x2340 (bvult C (_ bv35 35))))
 (and $x2340 $x2334 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu096.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 35))
(declare-fun %x () (_ BitVec 35))
(assert
 (let (($x2334 (= C (bvsub (_ bv35 35) (_ bv1 35)))))
 (let (($x2340 (bvult C (_ bv35 35))))
 (and $x2340 $x2334 (and (distinct (bvsub (_ bv0 35) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu097.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 36))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 36))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (and $x2395 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu098.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 36))
(declare-fun %x () (_ BitVec 36))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (let (($x2401 (bvult C (_ bv36 36))))
 (and $x2401 $x2395 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu099.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 36))
(declare-fun %x () (_ BitVec 36))
(assert
 (let (($x2395 (= C (bvsub (_ bv36 36) (_ bv1 36)))))
 (let (($x2401 (bvult C (_ bv36 36))))
 (and $x2401 $x2395 (and (distinct (bvsub (_ bv0 36) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu100.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 37))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 37))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (and $x2456 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu101.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 37))
(declare-fun %x () (_ BitVec 37))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (let (($x2462 (bvult C (_ bv37 37))))
 (and $x2462 $x2456 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu102.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 37))
(declare-fun %x () (_ BitVec 37))
(assert
 (let (($x2456 (= C (bvsub (_ bv37 37) (_ bv1 37)))))
 (let (($x2462 (bvult C (_ bv37 37))))
 (and $x2462 $x2456 (and (distinct (bvsub (_ bv0 37) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu103.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 38))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 38))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (and $x2517 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu104.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 38))
(declare-fun %x () (_ BitVec 38))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (let (($x2523 (bvult C (_ bv38 38))))
 (and $x2523 $x2517 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu105.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 38))
(declare-fun %x () (_ BitVec 38))
(assert
 (let (($x2517 (= C (bvsub (_ bv38 38) (_ bv1 38)))))
 (let (($x2523 (bvult C (_ bv38 38))))
 (and $x2523 $x2517 (and (distinct (bvsub (_ bv0 38) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu106.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 39))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 39))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (and $x2578 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu107.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 39))
(declare-fun %x () (_ BitVec 39))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (let (($x2584 (bvult C (_ bv39 39))))
 (and $x2584 $x2578 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu108.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 39))
(declare-fun %x () (_ BitVec 39))
(assert
 (let (($x2578 (= C (bvsub (_ bv39 39) (_ bv1 39)))))
 (let (($x2584 (bvult C (_ bv39 39))))
 (and $x2584 $x2578 (and (distinct (bvsub (_ bv0 39) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu109.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 40))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 40))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (and $x2639 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu110.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 40))
(declare-fun %x () (_ BitVec 40))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (let (($x2645 (bvult C (_ bv40 40))))
 (and $x2645 $x2639 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu111.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 40))
(declare-fun %x () (_ BitVec 40))
(assert
 (let (($x2639 (= C (bvsub (_ bv40 40) (_ bv1 40)))))
 (let (($x2645 (bvult C (_ bv40 40))))
 (and $x2645 $x2639 (and (distinct (bvsub (_ bv0 40) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu112.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 41))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 41))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (and $x2700 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu113.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 41))
(declare-fun %x () (_ BitVec 41))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (let (($x2706 (bvult C (_ bv41 41))))
 (and $x2706 $x2700 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu114.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 41))
(declare-fun %x () (_ BitVec 41))
(assert
 (let (($x2700 (= C (bvsub (_ bv41 41) (_ bv1 41)))))
 (let (($x2706 (bvult C (_ bv41 41))))
 (and $x2706 $x2700 (and (distinct (bvsub (_ bv0 41) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu115.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 42))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 42))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (and $x2761 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu116.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 42))
(declare-fun %x () (_ BitVec 42))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (let (($x2767 (bvult C (_ bv42 42))))
 (and $x2767 $x2761 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu117.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 42))
(declare-fun %x () (_ BitVec 42))
(assert
 (let (($x2761 (= C (bvsub (_ bv42 42) (_ bv1 42)))))
 (let (($x2767 (bvult C (_ bv42 42))))
 (and $x2767 $x2761 (and (distinct (bvsub (_ bv0 42) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu118.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 43))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 43))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (and $x2822 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu119.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 43))
(declare-fun %x () (_ BitVec 43))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (let (($x2828 (bvult C (_ bv43 43))))
 (and $x2828 $x2822 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu120.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 43))
(declare-fun %x () (_ BitVec 43))
(assert
 (let (($x2822 (= C (bvsub (_ bv43 43) (_ bv1 43)))))
 (let (($x2828 (bvult C (_ bv43 43))))
 (and $x2828 $x2822 (and (distinct (bvsub (_ bv0 43) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu121.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 44))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 44))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (and $x2883 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu122.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 44))
(declare-fun %x () (_ BitVec 44))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (let (($x2889 (bvult C (_ bv44 44))))
 (and $x2889 $x2883 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu123.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 44))
(declare-fun %x () (_ BitVec 44))
(assert
 (let (($x2883 (= C (bvsub (_ bv44 44) (_ bv1 44)))))
 (let (($x2889 (bvult C (_ bv44 44))))
 (and $x2889 $x2883 (and (distinct (bvsub (_ bv0 44) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu124.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 45))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 45))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (and $x2944 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu125.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 45))
(declare-fun %x () (_ BitVec 45))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (let (($x2950 (bvult C (_ bv45 45))))
 (and $x2950 $x2944 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu126.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 45))
(declare-fun %x () (_ BitVec 45))
(assert
 (let (($x2944 (= C (bvsub (_ bv45 45) (_ bv1 45)))))
 (let (($x2950 (bvult C (_ bv45 45))))
 (and $x2950 $x2944 (and (distinct (bvsub (_ bv0 45) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu127.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 46))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 46))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (and $x3005 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu128.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 46))
(declare-fun %x () (_ BitVec 46))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (let (($x3011 (bvult C (_ bv46 46))))
 (and $x3011 $x3005 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu129.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 46))
(declare-fun %x () (_ BitVec 46))
(assert
 (let (($x3005 (= C (bvsub (_ bv46 46) (_ bv1 46)))))
 (let (($x3011 (bvult C (_ bv46 46))))
 (and $x3011 $x3005 (and (distinct (bvsub (_ bv0 46) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu130.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 47))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 47))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (and $x3066 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu131.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 47))
(declare-fun %x () (_ BitVec 47))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (let (($x3072 (bvult C (_ bv47 47))))
 (and $x3072 $x3066 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu132.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 47))
(declare-fun %x () (_ BitVec 47))
(assert
 (let (($x3066 (= C (bvsub (_ bv47 47) (_ bv1 47)))))
 (let (($x3072 (bvult C (_ bv47 47))))
 (and $x3072 $x3066 (and (distinct (bvsub (_ bv0 47) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu133.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 48))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 48))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (and $x3127 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu134.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 48))
(declare-fun %x () (_ BitVec 48))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (let (($x3133 (bvult C (_ bv48 48))))
 (and $x3133 $x3127 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu135.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 48))
(declare-fun %x () (_ BitVec 48))
(assert
 (let (($x3127 (= C (bvsub (_ bv48 48) (_ bv1 48)))))
 (let (($x3133 (bvult C (_ bv48 48))))
 (and $x3133 $x3127 (and (distinct (bvsub (_ bv0 48) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu136.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 49))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 49))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (and $x3188 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu137.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 49))
(declare-fun %x () (_ BitVec 49))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (let (($x3194 (bvult C (_ bv49 49))))
 (and $x3194 $x3188 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu138.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 49))
(declare-fun %x () (_ BitVec 49))
(assert
 (let (($x3188 (= C (bvsub (_ bv49 49) (_ bv1 49)))))
 (let (($x3194 (bvult C (_ bv49 49))))
 (and $x3194 $x3188 (and (distinct (bvsub (_ bv0 49) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu139.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 50))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 50))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (and $x3249 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu140.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 50))
(declare-fun %x () (_ BitVec 50))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (let (($x3255 (bvult C (_ bv50 50))))
 (and $x3255 $x3249 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu141.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 50))
(declare-fun %x () (_ BitVec 50))
(assert
 (let (($x3249 (= C (bvsub (_ bv50 50) (_ bv1 50)))))
 (let (($x3255 (bvult C (_ bv50 50))))
 (and $x3255 $x3249 (and (distinct (bvsub (_ bv0 50) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu142.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 51))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 51))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (and $x3310 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu143.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 51))
(declare-fun %x () (_ BitVec 51))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (let (($x3316 (bvult C (_ bv51 51))))
 (and $x3316 $x3310 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu144.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 51))
(declare-fun %x () (_ BitVec 51))
(assert
 (let (($x3310 (= C (bvsub (_ bv51 51) (_ bv1 51)))))
 (let (($x3316 (bvult C (_ bv51 51))))
 (and $x3316 $x3310 (and (distinct (bvsub (_ bv0 51) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu145.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 52))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 52))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (and $x3371 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu146.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 52))
(declare-fun %x () (_ BitVec 52))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (let (($x3377 (bvult C (_ bv52 52))))
 (and $x3377 $x3371 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu147.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 52))
(declare-fun %x () (_ BitVec 52))
(assert
 (let (($x3371 (= C (bvsub (_ bv52 52) (_ bv1 52)))))
 (let (($x3377 (bvult C (_ bv52 52))))
 (and $x3377 $x3371 (and (distinct (bvsub (_ bv0 52) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu148.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 53))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 53))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (and $x3432 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu149.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 53))
(declare-fun %x () (_ BitVec 53))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (let (($x3438 (bvult C (_ bv53 53))))
 (and $x3438 $x3432 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu150.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 53))
(declare-fun %x () (_ BitVec 53))
(assert
 (let (($x3432 (= C (bvsub (_ bv53 53) (_ bv1 53)))))
 (let (($x3438 (bvult C (_ bv53 53))))
 (and $x3438 $x3432 (and (distinct (bvsub (_ bv0 53) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu151.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 54))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 54))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (and $x3493 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu152.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 54))
(declare-fun %x () (_ BitVec 54))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (let (($x3499 (bvult C (_ bv54 54))))
 (and $x3499 $x3493 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu153.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 54))
(declare-fun %x () (_ BitVec 54))
(assert
 (let (($x3493 (= C (bvsub (_ bv54 54) (_ bv1 54)))))
 (let (($x3499 (bvult C (_ bv54 54))))
 (and $x3499 $x3493 (and (distinct (bvsub (_ bv0 54) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu154.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 55))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 55))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (and $x3554 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu155.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 55))
(declare-fun %x () (_ BitVec 55))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (let (($x3560 (bvult C (_ bv55 55))))
 (and $x3560 $x3554 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu156.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 55))
(declare-fun %x () (_ BitVec 55))
(assert
 (let (($x3554 (= C (bvsub (_ bv55 55) (_ bv1 55)))))
 (let (($x3560 (bvult C (_ bv55 55))))
 (and $x3560 $x3554 (and (distinct (bvsub (_ bv0 55) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu157.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 56))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 56))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (and $x3615 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu158.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 56))
(declare-fun %x () (_ BitVec 56))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (let (($x3621 (bvult C (_ bv56 56))))
 (and $x3621 $x3615 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu159.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 56))
(declare-fun %x () (_ BitVec 56))
(assert
 (let (($x3615 (= C (bvsub (_ bv56 56) (_ bv1 56)))))
 (let (($x3621 (bvult C (_ bv56 56))))
 (and $x3621 $x3615 (and (distinct (bvsub (_ bv0 56) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu160.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 57))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 57))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (and $x3676 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu161.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 57))
(declare-fun %x () (_ BitVec 57))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (let (($x3682 (bvult C (_ bv57 57))))
 (and $x3682 $x3676 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu162.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 57))
(declare-fun %x () (_ BitVec 57))
(assert
 (let (($x3676 (= C (bvsub (_ bv57 57) (_ bv1 57)))))
 (let (($x3682 (bvult C (_ bv57 57))))
 (and $x3682 $x3676 (and (distinct (bvsub (_ bv0 57) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu163.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 58))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 58))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (and $x3737 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu164.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 58))
(declare-fun %x () (_ BitVec 58))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (let (($x3743 (bvult C (_ bv58 58))))
 (and $x3743 $x3737 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu165.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 58))
(declare-fun %x () (_ BitVec 58))
(assert
 (let (($x3737 (= C (bvsub (_ bv58 58) (_ bv1 58)))))
 (let (($x3743 (bvult C (_ bv58 58))))
 (and $x3743 $x3737 (and (distinct (bvsub (_ bv0 58) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu166.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 59))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 59))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (and $x3798 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu167.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 59))
(declare-fun %x () (_ BitVec 59))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (let (($x3804 (bvult C (_ bv59 59))))
 (and $x3804 $x3798 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu168.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 59))
(declare-fun %x () (_ BitVec 59))
(assert
 (let (($x3798 (= C (bvsub (_ bv59 59) (_ bv1 59)))))
 (let (($x3804 (bvult C (_ bv59 59))))
 (and $x3804 $x3798 (and (distinct (bvsub (_ bv0 59) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu169.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 60))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 60))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (and $x3859 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu170.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 60))
(declare-fun %x () (_ BitVec 60))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (let (($x3865 (bvult C (_ bv60 60))))
 (and $x3865 $x3859 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu171.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 60))
(declare-fun %x () (_ BitVec 60))
(assert
 (let (($x3859 (= C (bvsub (_ bv60 60) (_ bv1 60)))))
 (let (($x3865 (bvult C (_ bv60 60))))
 (and $x3865 $x3859 (and (distinct (bvsub (_ bv0 60) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu172.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 61))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 61))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (and $x3920 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu173.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 61))
(declare-fun %x () (_ BitVec 61))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (let (($x3926 (bvult C (_ bv61 61))))
 (and $x3926 $x3920 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu174.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 61))
(declare-fun %x () (_ BitVec 61))
(assert
 (let (($x3920 (= C (bvsub (_ bv61 61) (_ bv1 61)))))
 (let (($x3926 (bvult C (_ bv61 61))))
 (and $x3926 $x3920 (and (distinct (bvsub (_ bv0 61) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu175.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 62))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 62))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (and $x3981 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu176.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 62))
(declare-fun %x () (_ BitVec 62))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (let (($x3987 (bvult C (_ bv62 62))))
 (and $x3987 $x3981 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu177.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 62))
(declare-fun %x () (_ BitVec 62))
(assert
 (let (($x3981 (= C (bvsub (_ bv62 62) (_ bv1 62)))))
 (let (($x3987 (bvult C (_ bv62 62))))
 (and $x3987 $x3981 (and (distinct (bvsub (_ bv0 62) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu178.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 63))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 63))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (and $x4042 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu179.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 63))
(declare-fun %x () (_ BitVec 63))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (let (($x4048 (bvult C (_ bv63 63))))
 (and $x4048 $x4042 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu180.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 63))
(declare-fun %x () (_ BitVec 63))
(assert
 (let (($x4042 (= C (bvsub (_ bv63 63) (_ bv1 63)))))
 (let (($x4048 (bvult C (_ bv63 63))))
 (and $x4048 $x4042 (and (distinct (bvsub (_ bv0 63) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu181.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 64))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 64))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (and $x4102 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu182.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 64))
(declare-fun %x () (_ BitVec 64))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (let (($x4108 (bvult C (_ bv64 64))))
 (and $x4108 $x4102 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu183.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 64))
(declare-fun %x () (_ BitVec 64))
(assert
 (let (($x4102 (= C (bvsub (_ bv64 64) (_ bv1 64)))))
 (let (($x4108 (bvult C (_ bv64 64))))
 (and $x4108 $x4102 (and (distinct (bvsub (_ bv0 64) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu184.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 3))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 3))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (and $x4156 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu185.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 3))
(declare-fun %x () (_ BitVec 3))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (let (($x4158 (bvult C (_ bv3 3))))
 (and $x4158 $x4156 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu186.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 3))
(declare-fun %x () (_ BitVec 3))
(assert
 (let (($x4156 (= C (bvsub (_ bv3 3) (_ bv1 3)))))
 (let (($x4158 (bvult C (_ bv3 3))))
 (and $x4158 $x4156 (and (distinct (bvsub (_ bv0 3) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)

==> bench/valu187.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %x () (_ BitVec 2))
(declare-fun u_%x () (_ BitVec 8))
(declare-fun C () (_ BitVec 2))
(assert
 (let (($x212 (and (distinct u_%x (_ bv1 8)) true)))
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (and $x4212 $x212 (and (distinct %x %x) true)))))
(check-sat)

==> bench/valu188.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 2))
(declare-fun %x () (_ BitVec 2))
(declare-fun u_%a () (_ BitVec 8))
(assert
 (let (($x231 (and (distinct u_%a (_ bv1 8)) true)))
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (let (($x4218 (bvult C (_ bv2 2))))
 (and $x4218 $x4212 $x231 (and (distinct (bvlshr %x C) (bvlshr %x C)) true))))))
(check-sat)

==> bench/valu189.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C () (_ BitVec 2))
(declare-fun %x () (_ BitVec 2))
(assert
 (let (($x4212 (= C (bvsub (_ bv2 2) (_ bv1 2)))))
 (let (($x4218 (bvult C (_ bv2 2))))
 (and $x4218 $x4212 (and (distinct (bvsub (_ bv0 2) (bvlshr %x C)) (bvashr %x C)) true)))))
(check-sat)
