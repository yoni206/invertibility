==> bench/defi000.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun u_%b () (_ BitVec 8))
(assert
 (and (and (distinct u_%b (_ bv2 8)) true) false))
(check-sat)

==> bench/defi002.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 4))
(assert
 (let (($x164 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x164 (not (bvult (_ bv1 4) (_ bv4 4))))))
(check-sat)

==> bench/defi004.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 5))
(assert
 (let (($x181 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x181 (not (bvult (_ bv1 5) (_ bv5 5))))))
(check-sat)

==> bench/defi006.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 6))
(assert
 (let (($x239 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x239 (not (bvult (_ bv1 6) (_ bv6 6))))))
(check-sat)

==> bench/defi008.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 7))
(assert
 (let (($x262 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x262 (not (bvult (_ bv1 7) (_ bv7 7))))))
(check-sat)

==> bench/defi010.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 8))
(assert
 (let (($x266 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x266 (not (bvult (_ bv1 8) (_ bv8 8))))))
(check-sat)

==> bench/defi012.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 9))
(assert
 (let (($x365 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x365 (not (bvult (_ bv1 9) (_ bv9 9))))))
(check-sat)

==> bench/defi014.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 10))
(assert
 (let (($x386 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x386 (not (bvult (_ bv1 10) (_ bv10 10))))))
(check-sat)

==> bench/defi016.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 11))
(assert
 (let (($x392 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x392 (not (bvult (_ bv1 11) (_ bv11 11))))))
(check-sat)

==> bench/defi018.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 12))
(assert
 (let (($x452 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x452 (not (bvult (_ bv1 12) (_ bv12 12))))))
(check-sat)

==> bench/defi020.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 13))
(assert
 (let (($x495 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x495 (not (bvult (_ bv1 13) (_ bv13 13))))))
(check-sat)

==> bench/defi022.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 14))
(assert
 (let (($x538 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x538 (not (bvult (_ bv1 14) (_ bv14 14))))))
(check-sat)

==> bench/defi024.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 15))
(assert
 (let (($x574 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x574 (not (bvult (_ bv1 15) (_ bv15 15))))))
(check-sat)

==> bench/defi026.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 16))
(assert
 (let (($x625 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x625 (not (bvult (_ bv1 16) (_ bv16 16))))))
(check-sat)

==> bench/defi028.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 17))
(assert
 (let (($x668 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x668 (not (bvult (_ bv1 17) (_ bv17 17))))))
(check-sat)

==> bench/defi030.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 18))
(assert
 (let (($x711 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x711 (not (bvult (_ bv1 18) (_ bv18 18))))))
(check-sat)

==> bench/defi032.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 19))
(assert
 (let (($x746 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x746 (not (bvult (_ bv1 19) (_ bv19 19))))))
(check-sat)

==> bench/defi034.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 20))
(assert
 (let (($x796 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x796 (not (bvult (_ bv1 20) (_ bv20 20))))))
(check-sat)

==> bench/defi036.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 21))
(assert
 (let (($x842 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x842 (not (bvult (_ bv1 21) (_ bv21 21))))))
(check-sat)

==> bench/defi038.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 22))
(assert
 (let (($x882 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x882 (not (bvult (_ bv1 22) (_ bv22 22))))))
(check-sat)

==> bench/defi040.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 23))
(assert
 (let (($x925 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x925 (not (bvult (_ bv1 23) (_ bv23 23))))))
(check-sat)

==> bench/defi042.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 24))
(assert
 (let (($x968 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x968 (not (bvult (_ bv1 24) (_ bv24 24))))))
(check-sat)

==> bench/defi044.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 25))
(assert
 (let (($x1015 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1015 (not (bvult (_ bv1 25) (_ bv25 25))))))
(check-sat)

==> bench/defi046.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 26))
(assert
 (let (($x1058 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1058 (not (bvult (_ bv1 26) (_ bv26 26))))))
(check-sat)

==> bench/defi048.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 27))
(assert
 (let (($x1101 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1101 (not (bvult (_ bv1 27) (_ bv27 27))))))
(check-sat)

==> bench/defi050.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 28))
(assert
 (let (($x1144 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1144 (not (bvult (_ bv1 28) (_ bv28 28))))))
(check-sat)

==> bench/defi052.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 29))
(assert
 (let (($x1187 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1187 (not (bvult (_ bv1 29) (_ bv29 29))))))
(check-sat)

==> bench/defi054.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 30))
(assert
 (let (($x1230 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1230 (not (bvult (_ bv1 30) (_ bv30 30))))))
(check-sat)

==> bench/defi056.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 31))
(assert
 (let (($x1273 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1273 (not (bvult (_ bv1 31) (_ bv31 31))))))
(check-sat)

==> bench/defi058.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 32))
(assert
 (let (($x1279 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1279 (not (bvult (_ bv1 32) (_ bv32 32))))))
(check-sat)

==> bench/defi060.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 33))
(assert
 (let (($x1359 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1359 (not (bvult (_ bv1 33) (_ bv33 33))))))
(check-sat)

==> bench/defi062.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 34))
(assert
 (let (($x1401 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1401 (not (bvult (_ bv1 34) (_ bv34 34))))))
(check-sat)

==> bench/defi064.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 35))
(assert
 (let (($x1444 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1444 (not (bvult (_ bv1 35) (_ bv35 35))))))
(check-sat)

==> bench/defi066.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 36))
(assert
 (let (($x1487 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1487 (not (bvult (_ bv1 36) (_ bv36 36))))))
(check-sat)

==> bench/defi068.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 37))
(assert
 (let (($x1530 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1530 (not (bvult (_ bv1 37) (_ bv37 37))))))
(check-sat)

==> bench/defi070.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 38))
(assert
 (let (($x1573 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1573 (not (bvult (_ bv1 38) (_ bv38 38))))))
(check-sat)

==> bench/defi072.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 39))
(assert
 (let (($x1616 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1616 (not (bvult (_ bv1 39) (_ bv39 39))))))
(check-sat)

==> bench/defi074.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 40))
(assert
 (let (($x1659 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1659 (not (bvult (_ bv1 40) (_ bv40 40))))))
(check-sat)

==> bench/defi076.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 41))
(assert
 (let (($x1702 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1702 (not (bvult (_ bv1 41) (_ bv41 41))))))
(check-sat)

==> bench/defi078.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 42))
(assert
 (let (($x1745 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1745 (not (bvult (_ bv1 42) (_ bv42 42))))))
(check-sat)

==> bench/defi080.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 43))
(assert
 (let (($x1788 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1788 (not (bvult (_ bv1 43) (_ bv43 43))))))
(check-sat)

==> bench/defi082.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 44))
(assert
 (let (($x1831 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1831 (not (bvult (_ bv1 44) (_ bv44 44))))))
(check-sat)

==> bench/defi084.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 45))
(assert
 (let (($x1874 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1874 (not (bvult (_ bv1 45) (_ bv45 45))))))
(check-sat)

==> bench/defi086.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 46))
(assert
 (let (($x1917 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1917 (not (bvult (_ bv1 46) (_ bv46 46))))))
(check-sat)

==> bench/defi088.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 47))
(assert
 (let (($x1960 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1960 (not (bvult (_ bv1 47) (_ bv47 47))))))
(check-sat)

==> bench/defi090.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 48))
(assert
 (let (($x2003 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2003 (not (bvult (_ bv1 48) (_ bv48 48))))))
(check-sat)

==> bench/defi092.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 49))
(assert
 (let (($x2046 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2046 (not (bvult (_ bv1 49) (_ bv49 49))))))
(check-sat)

==> bench/defi094.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 50))
(assert
 (let (($x2089 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2089 (not (bvult (_ bv1 50) (_ bv50 50))))))
(check-sat)

==> bench/defi096.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 51))
(assert
 (let (($x2132 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2132 (not (bvult (_ bv1 51) (_ bv51 51))))))
(check-sat)

==> bench/defi098.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 52))
(assert
 (let (($x2175 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2175 (not (bvult (_ bv1 52) (_ bv52 52))))))
(check-sat)

==> bench/defi100.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 53))
(assert
 (let (($x2218 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2218 (not (bvult (_ bv1 53) (_ bv53 53))))))
(check-sat)

==> bench/defi102.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 54))
(assert
 (let (($x2261 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2261 (not (bvult (_ bv1 54) (_ bv54 54))))))
(check-sat)

==> bench/defi104.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 55))
(assert
 (let (($x2304 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2304 (not (bvult (_ bv1 55) (_ bv55 55))))))
(check-sat)

==> bench/defi106.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 56))
(assert
 (let (($x2347 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2347 (not (bvult (_ bv1 56) (_ bv56 56))))))
(check-sat)

==> bench/defi108.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 57))
(assert
 (let (($x2390 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2390 (not (bvult (_ bv1 57) (_ bv57 57))))))
(check-sat)

==> bench/defi110.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 58))
(assert
 (let (($x2433 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2433 (not (bvult (_ bv1 58) (_ bv58 58))))))
(check-sat)

==> bench/defi112.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 59))
(assert
 (let (($x2476 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2476 (not (bvult (_ bv1 59) (_ bv59 59))))))
(check-sat)

==> bench/defi114.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 60))
(assert
 (let (($x2519 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2519 (not (bvult (_ bv1 60) (_ bv60 60))))))
(check-sat)

==> bench/defi116.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 61))
(assert
 (let (($x2562 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2562 (not (bvult (_ bv1 61) (_ bv61 61))))))
(check-sat)

==> bench/defi118.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 62))
(assert
 (let (($x2605 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2605 (not (bvult (_ bv1 62) (_ bv62 62))))))
(check-sat)

==> bench/defi120.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 63))
(assert
 (let (($x2641 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2641 (not (bvult (_ bv1 63) (_ bv63 63))))))
(check-sat)

==> bench/defi122.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 64))
(assert
 (let (($x2650 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2650 (not (bvult (_ bv1 64) (_ bv64 64))))))
(check-sat)

==> bench/defi124.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 3))
(assert
 (let (($x2782 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2782 (not (bvult (_ bv1 3) (_ bv3 3))))))
(check-sat)

==> bench/defi126.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 2))
(assert
 (let (($x2741 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2741 (not (bvult (_ bv1 2) (_ bv2 2))))))
(check-sat)

==> bench/fina003.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(assert
 (and (distinct mem0 mem0) true))
(check-sat)

==> bench/pois002.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 4))
(assert
 (let (($x164 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x164 (not (= (bvlshr (bvshl %b (_ bv1 4)) (_ bv1 4)) %b)))))
(check-sat)

==> bench/pois004.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 5))
(assert
 (let (($x181 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x181 (not (= (bvlshr (bvshl %b (_ bv1 5)) (_ bv1 5)) %b)))))
(check-sat)

==> bench/pois006.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 6))
(assert
 (let (($x239 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x239 (not (= (bvlshr (bvshl %b (_ bv1 6)) (_ bv1 6)) %b)))))
(check-sat)

==> bench/pois008.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 7))
(assert
 (let (($x262 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x262 (not (= (bvlshr (bvshl %b (_ bv1 7)) (_ bv1 7)) %b)))))
(check-sat)

==> bench/pois010.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 8))
(assert
 (let (($x266 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x266 (not (= (bvlshr (bvshl %b (_ bv1 8)) (_ bv1 8)) %b)))))
(check-sat)

==> bench/pois012.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 9))
(assert
 (let (($x365 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x365 (not (= (bvlshr (bvshl %b (_ bv1 9)) (_ bv1 9)) %b)))))
(check-sat)

==> bench/pois014.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 10))
(assert
 (let (($x386 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x386 (not (= (bvlshr (bvshl %b (_ bv1 10)) (_ bv1 10)) %b)))))
(check-sat)

==> bench/pois016.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 11))
(assert
 (let (($x392 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x392 (not (= (bvlshr (bvshl %b (_ bv1 11)) (_ bv1 11)) %b)))))
(check-sat)

==> bench/pois018.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 12))
(assert
 (let (($x452 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x452 (not (= (bvlshr (bvshl %b (_ bv1 12)) (_ bv1 12)) %b)))))
(check-sat)

==> bench/pois020.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 13))
(assert
 (let (($x495 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x495 (not (= (bvlshr (bvshl %b (_ bv1 13)) (_ bv1 13)) %b)))))
(check-sat)

==> bench/pois022.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 14))
(assert
 (let (($x538 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x538 (not (= (bvlshr (bvshl %b (_ bv1 14)) (_ bv1 14)) %b)))))
(check-sat)

==> bench/pois024.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 15))
(assert
 (let (($x574 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x574 (not (= (bvlshr (bvshl %b (_ bv1 15)) (_ bv1 15)) %b)))))
(check-sat)

==> bench/pois026.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 16))
(assert
 (let (($x625 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x625 (not (= (bvlshr (bvshl %b (_ bv1 16)) (_ bv1 16)) %b)))))
(check-sat)

==> bench/pois028.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 17))
(assert
 (let (($x668 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x668 (not (= (bvlshr (bvshl %b (_ bv1 17)) (_ bv1 17)) %b)))))
(check-sat)

==> bench/pois030.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 18))
(assert
 (let (($x711 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x711 (not (= (bvlshr (bvshl %b (_ bv1 18)) (_ bv1 18)) %b)))))
(check-sat)

==> bench/pois032.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 19))
(assert
 (let (($x746 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x746 (not (= (bvlshr (bvshl %b (_ bv1 19)) (_ bv1 19)) %b)))))
(check-sat)

==> bench/pois034.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 20))
(assert
 (let (($x796 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x796 (not (= (bvlshr (bvshl %b (_ bv1 20)) (_ bv1 20)) %b)))))
(check-sat)

==> bench/pois036.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 21))
(assert
 (let (($x842 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x842 (not (= (bvlshr (bvshl %b (_ bv1 21)) (_ bv1 21)) %b)))))
(check-sat)

==> bench/pois038.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 22))
(assert
 (let (($x882 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x882 (not (= (bvlshr (bvshl %b (_ bv1 22)) (_ bv1 22)) %b)))))
(check-sat)

==> bench/pois040.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 23))
(assert
 (let (($x925 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x925 (not (= (bvlshr (bvshl %b (_ bv1 23)) (_ bv1 23)) %b)))))
(check-sat)

==> bench/pois042.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 24))
(assert
 (let (($x968 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x968 (not (= (bvlshr (bvshl %b (_ bv1 24)) (_ bv1 24)) %b)))))
(check-sat)

==> bench/pois044.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 25))
(assert
 (let (($x1015 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1015 (not (= (bvlshr (bvshl %b (_ bv1 25)) (_ bv1 25)) %b)))))
(check-sat)

==> bench/pois046.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 26))
(assert
 (let (($x1058 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1058 (not (= (bvlshr (bvshl %b (_ bv1 26)) (_ bv1 26)) %b)))))
(check-sat)

==> bench/pois048.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 27))
(assert
 (let (($x1101 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1101 (not (= (bvlshr (bvshl %b (_ bv1 27)) (_ bv1 27)) %b)))))
(check-sat)

==> bench/pois050.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 28))
(assert
 (let (($x1144 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1144 (not (= (bvlshr (bvshl %b (_ bv1 28)) (_ bv1 28)) %b)))))
(check-sat)

==> bench/pois052.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 29))
(assert
 (let (($x1187 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1187 (not (= (bvlshr (bvshl %b (_ bv1 29)) (_ bv1 29)) %b)))))
(check-sat)

==> bench/pois054.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 30))
(assert
 (let (($x1230 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1230 (not (= (bvlshr (bvshl %b (_ bv1 30)) (_ bv1 30)) %b)))))
(check-sat)

==> bench/pois056.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 31))
(assert
 (let (($x1273 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1273 (not (= (bvlshr (bvshl %b (_ bv1 31)) (_ bv1 31)) %b)))))
(check-sat)

==> bench/pois058.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 32))
(assert
 (let (($x1279 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1279 (not (= (bvlshr (bvshl %b (_ bv1 32)) (_ bv1 32)) %b)))))
(check-sat)

==> bench/pois060.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 33))
(assert
 (let (($x1359 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1359 (not (= (bvlshr (bvshl %b (_ bv1 33)) (_ bv1 33)) %b)))))
(check-sat)

==> bench/pois062.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 34))
(assert
 (let (($x1401 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1401 (not (= (bvlshr (bvshl %b (_ bv1 34)) (_ bv1 34)) %b)))))
(check-sat)

==> bench/pois064.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 35))
(assert
 (let (($x1444 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1444 (not (= (bvlshr (bvshl %b (_ bv1 35)) (_ bv1 35)) %b)))))
(check-sat)

==> bench/pois066.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 36))
(assert
 (let (($x1487 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1487 (not (= (bvlshr (bvshl %b (_ bv1 36)) (_ bv1 36)) %b)))))
(check-sat)

==> bench/pois068.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 37))
(assert
 (let (($x1530 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1530 (not (= (bvlshr (bvshl %b (_ bv1 37)) (_ bv1 37)) %b)))))
(check-sat)

==> bench/pois070.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 38))
(assert
 (let (($x1573 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1573 (not (= (bvlshr (bvshl %b (_ bv1 38)) (_ bv1 38)) %b)))))
(check-sat)

==> bench/pois072.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 39))
(assert
 (let (($x1616 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1616 (not (= (bvlshr (bvshl %b (_ bv1 39)) (_ bv1 39)) %b)))))
(check-sat)

==> bench/pois074.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 40))
(assert
 (let (($x1659 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1659 (not (= (bvlshr (bvshl %b (_ bv1 40)) (_ bv1 40)) %b)))))
(check-sat)

==> bench/pois076.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 41))
(assert
 (let (($x1702 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1702 (not (= (bvlshr (bvshl %b (_ bv1 41)) (_ bv1 41)) %b)))))
(check-sat)

==> bench/pois078.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 42))
(assert
 (let (($x1745 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1745 (not (= (bvlshr (bvshl %b (_ bv1 42)) (_ bv1 42)) %b)))))
(check-sat)

==> bench/pois080.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 43))
(assert
 (let (($x1788 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1788 (not (= (bvlshr (bvshl %b (_ bv1 43)) (_ bv1 43)) %b)))))
(check-sat)

==> bench/pois082.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 44))
(assert
 (let (($x1831 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1831 (not (= (bvlshr (bvshl %b (_ bv1 44)) (_ bv1 44)) %b)))))
(check-sat)

==> bench/pois084.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 45))
(assert
 (let (($x1874 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1874 (not (= (bvlshr (bvshl %b (_ bv1 45)) (_ bv1 45)) %b)))))
(check-sat)

==> bench/pois086.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 46))
(assert
 (let (($x1917 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1917 (not (= (bvlshr (bvshl %b (_ bv1 46)) (_ bv1 46)) %b)))))
(check-sat)

==> bench/pois088.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 47))
(assert
 (let (($x1960 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1960 (not (= (bvlshr (bvshl %b (_ bv1 47)) (_ bv1 47)) %b)))))
(check-sat)

==> bench/pois090.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 48))
(assert
 (let (($x2003 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2003 (not (= (bvlshr (bvshl %b (_ bv1 48)) (_ bv1 48)) %b)))))
(check-sat)

==> bench/pois092.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 49))
(assert
 (let (($x2046 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2046 (not (= (bvlshr (bvshl %b (_ bv1 49)) (_ bv1 49)) %b)))))
(check-sat)

==> bench/pois094.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 50))
(assert
 (let (($x2089 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2089 (not (= (bvlshr (bvshl %b (_ bv1 50)) (_ bv1 50)) %b)))))
(check-sat)

==> bench/pois096.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 51))
(assert
 (let (($x2132 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2132 (not (= (bvlshr (bvshl %b (_ bv1 51)) (_ bv1 51)) %b)))))
(check-sat)

==> bench/pois098.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 52))
(assert
 (let (($x2175 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2175 (not (= (bvlshr (bvshl %b (_ bv1 52)) (_ bv1 52)) %b)))))
(check-sat)

==> bench/pois100.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 53))
(assert
 (let (($x2218 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2218 (not (= (bvlshr (bvshl %b (_ bv1 53)) (_ bv1 53)) %b)))))
(check-sat)

==> bench/pois102.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 54))
(assert
 (let (($x2261 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2261 (not (= (bvlshr (bvshl %b (_ bv1 54)) (_ bv1 54)) %b)))))
(check-sat)

==> bench/pois104.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 55))
(assert
 (let (($x2304 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2304 (not (= (bvlshr (bvshl %b (_ bv1 55)) (_ bv1 55)) %b)))))
(check-sat)

==> bench/pois106.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 56))
(assert
 (let (($x2347 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2347 (not (= (bvlshr (bvshl %b (_ bv1 56)) (_ bv1 56)) %b)))))
(check-sat)

==> bench/pois108.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 57))
(assert
 (let (($x2390 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2390 (not (= (bvlshr (bvshl %b (_ bv1 57)) (_ bv1 57)) %b)))))
(check-sat)

==> bench/pois110.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 58))
(assert
 (let (($x2433 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2433 (not (= (bvlshr (bvshl %b (_ bv1 58)) (_ bv1 58)) %b)))))
(check-sat)

==> bench/pois112.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 59))
(assert
 (let (($x2476 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2476 (not (= (bvlshr (bvshl %b (_ bv1 59)) (_ bv1 59)) %b)))))
(check-sat)

==> bench/pois114.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 60))
(assert
 (let (($x2519 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2519 (not (= (bvlshr (bvshl %b (_ bv1 60)) (_ bv1 60)) %b)))))
(check-sat)

==> bench/pois116.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 61))
(assert
 (let (($x2562 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2562 (not (= (bvlshr (bvshl %b (_ bv1 61)) (_ bv1 61)) %b)))))
(check-sat)

==> bench/pois118.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 62))
(assert
 (let (($x2605 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2605 (not (= (bvlshr (bvshl %b (_ bv1 62)) (_ bv1 62)) %b)))))
(check-sat)

==> bench/pois120.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 63))
(assert
 (let (($x2641 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2641 (not (= (bvlshr (bvshl %b (_ bv1 63)) (_ bv1 63)) %b)))))
(check-sat)

==> bench/pois122.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 64))
(assert
 (let (($x2650 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2650 (not (= (bvlshr (bvshl %b (_ bv1 64)) (_ bv1 64)) %b)))))
(check-sat)

==> bench/pois124.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 3))
(assert
 (let (($x2782 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2782 (not (= (bvlshr (bvshl %b (_ bv1 3)) (_ bv1 3)) %b)))))
(check-sat)

==> bench/pois126.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 2))
(assert
 (let (($x2741 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2741 (not (= (bvlshr (bvshl %b (_ bv1 2)) (_ bv1 2)) %b)))))
(check-sat)

==> bench/valu001.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 4))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu002.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 4))
(assert
 (let (($x164 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x164 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 4))) true))))
(check-sat)

==> bench/valu003.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 5))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu004.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 5))
(assert
 (let (($x181 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x181 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 5))) true))))
(check-sat)

==> bench/valu005.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 6))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu006.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 6))
(assert
 (let (($x239 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x239 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 6))) true))))
(check-sat)

==> bench/valu007.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 7))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu008.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 7))
(assert
 (let (($x262 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x262 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 7))) true))))
(check-sat)

==> bench/valu009.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 8))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu010.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 8))
(assert
 (let (($x266 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x266 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 8))) true))))
(check-sat)

==> bench/valu011.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 9))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu012.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 9))
(assert
 (let (($x365 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x365 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 9))) true))))
(check-sat)

==> bench/valu013.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 10))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu014.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 10))
(assert
 (let (($x386 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x386 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 10))) true))))
(check-sat)

==> bench/valu015.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 11))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu016.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 11))
(assert
 (let (($x392 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x392 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 11))) true))))
(check-sat)

==> bench/valu017.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 12))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu018.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 12))
(assert
 (let (($x452 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x452 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 12))) true))))
(check-sat)

==> bench/valu019.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 13))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu020.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 13))
(assert
 (let (($x495 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x495 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 13))) true))))
(check-sat)

==> bench/valu021.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 14))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu022.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 14))
(assert
 (let (($x538 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x538 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 14))) true))))
(check-sat)

==> bench/valu023.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 15))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu024.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 15))
(assert
 (let (($x574 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x574 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 15))) true))))
(check-sat)

==> bench/valu025.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 16))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu026.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 16))
(assert
 (let (($x625 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x625 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 16))) true))))
(check-sat)

==> bench/valu027.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 17))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu028.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 17))
(assert
 (let (($x668 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x668 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 17))) true))))
(check-sat)

==> bench/valu029.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 18))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu030.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 18))
(assert
 (let (($x711 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x711 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 18))) true))))
(check-sat)

==> bench/valu031.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 19))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu032.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 19))
(assert
 (let (($x746 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x746 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 19))) true))))
(check-sat)

==> bench/valu033.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 20))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu034.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 20))
(assert
 (let (($x796 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x796 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 20))) true))))
(check-sat)

==> bench/valu035.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 21))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu036.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 21))
(assert
 (let (($x842 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x842 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 21))) true))))
(check-sat)

==> bench/valu037.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 22))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu038.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 22))
(assert
 (let (($x882 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x882 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 22))) true))))
(check-sat)

==> bench/valu039.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 23))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu040.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 23))
(assert
 (let (($x925 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x925 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 23))) true))))
(check-sat)

==> bench/valu041.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 24))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu042.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 24))
(assert
 (let (($x968 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x968 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 24))) true))))
(check-sat)

==> bench/valu043.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 25))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu044.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 25))
(assert
 (let (($x1015 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1015 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 25))) true))))
(check-sat)

==> bench/valu045.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 26))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu046.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 26))
(assert
 (let (($x1058 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1058 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 26))) true))))
(check-sat)

==> bench/valu047.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 27))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu048.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 27))
(assert
 (let (($x1101 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1101 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 27))) true))))
(check-sat)

==> bench/valu049.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 28))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu050.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 28))
(assert
 (let (($x1144 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1144 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 28))) true))))
(check-sat)

==> bench/valu051.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 29))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu052.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 29))
(assert
 (let (($x1187 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1187 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 29))) true))))
(check-sat)

==> bench/valu053.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 30))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu054.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 30))
(assert
 (let (($x1230 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1230 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 30))) true))))
(check-sat)

==> bench/valu055.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 31))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu056.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 31))
(assert
 (let (($x1273 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1273 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 31))) true))))
(check-sat)

==> bench/valu057.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 32))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu058.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 32))
(assert
 (let (($x1279 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1279 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 32))) true))))
(check-sat)

==> bench/valu059.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 33))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu060.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 33))
(assert
 (let (($x1359 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1359 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 33))) true))))
(check-sat)

==> bench/valu061.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 34))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu062.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 34))
(assert
 (let (($x1401 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1401 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 34))) true))))
(check-sat)

==> bench/valu063.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 35))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu064.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 35))
(assert
 (let (($x1444 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1444 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 35))) true))))
(check-sat)

==> bench/valu065.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 36))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu066.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 36))
(assert
 (let (($x1487 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1487 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 36))) true))))
(check-sat)

==> bench/valu067.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 37))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu068.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 37))
(assert
 (let (($x1530 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1530 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 37))) true))))
(check-sat)

==> bench/valu069.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 38))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu070.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 38))
(assert
 (let (($x1573 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1573 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 38))) true))))
(check-sat)

==> bench/valu071.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 39))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu072.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 39))
(assert
 (let (($x1616 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1616 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 39))) true))))
(check-sat)

==> bench/valu073.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 40))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu074.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 40))
(assert
 (let (($x1659 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1659 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 40))) true))))
(check-sat)

==> bench/valu075.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 41))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu076.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 41))
(assert
 (let (($x1702 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1702 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 41))) true))))
(check-sat)

==> bench/valu077.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 42))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu078.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 42))
(assert
 (let (($x1745 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1745 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 42))) true))))
(check-sat)

==> bench/valu079.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 43))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu080.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 43))
(assert
 (let (($x1788 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1788 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 43))) true))))
(check-sat)

==> bench/valu081.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 44))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu082.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 44))
(assert
 (let (($x1831 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1831 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 44))) true))))
(check-sat)

==> bench/valu083.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 45))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu084.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 45))
(assert
 (let (($x1874 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1874 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 45))) true))))
(check-sat)

==> bench/valu085.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 46))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu086.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 46))
(assert
 (let (($x1917 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1917 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 46))) true))))
(check-sat)

==> bench/valu087.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 47))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu088.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 47))
(assert
 (let (($x1960 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x1960 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 47))) true))))
(check-sat)

==> bench/valu089.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 48))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu090.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 48))
(assert
 (let (($x2003 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2003 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 48))) true))))
(check-sat)

==> bench/valu091.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 49))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu092.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 49))
(assert
 (let (($x2046 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2046 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 49))) true))))
(check-sat)

==> bench/valu093.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 50))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu094.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 50))
(assert
 (let (($x2089 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2089 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 50))) true))))
(check-sat)

==> bench/valu095.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 51))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu096.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 51))
(assert
 (let (($x2132 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2132 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 51))) true))))
(check-sat)

==> bench/valu097.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 52))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu098.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 52))
(assert
 (let (($x2175 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2175 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 52))) true))))
(check-sat)

==> bench/valu099.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 53))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu100.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 53))
(assert
 (let (($x2218 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2218 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 53))) true))))
(check-sat)

==> bench/valu101.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 54))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu102.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 54))
(assert
 (let (($x2261 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2261 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 54))) true))))
(check-sat)

==> bench/valu103.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 55))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu104.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 55))
(assert
 (let (($x2304 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2304 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 55))) true))))
(check-sat)

==> bench/valu105.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 56))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu106.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 56))
(assert
 (let (($x2347 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2347 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 56))) true))))
(check-sat)

==> bench/valu107.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 57))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu108.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 57))
(assert
 (let (($x2390 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2390 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 57))) true))))
(check-sat)

==> bench/valu109.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 58))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu110.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 58))
(assert
 (let (($x2433 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2433 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 58))) true))))
(check-sat)

==> bench/valu111.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 59))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu112.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 59))
(assert
 (let (($x2476 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2476 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 59))) true))))
(check-sat)

==> bench/valu113.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 60))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu114.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 60))
(assert
 (let (($x2519 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2519 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 60))) true))))
(check-sat)

==> bench/valu115.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 61))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu116.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 61))
(assert
 (let (($x2562 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2562 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 61))) true))))
(check-sat)

==> bench/valu117.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 62))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu118.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 62))
(assert
 (let (($x2605 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2605 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 62))) true))))
(check-sat)

==> bench/valu119.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 63))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu120.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 63))
(assert
 (let (($x2641 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2641 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 63))) true))))
(check-sat)

==> bench/valu121.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 64))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu122.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 64))
(assert
 (let (($x2650 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2650 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 64))) true))))
(check-sat)

==> bench/valu123.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 3))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu124.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 3))
(assert
 (let (($x2782 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2782 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 3))) true))))
(check-sat)

==> bench/valu125.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 2))
(declare-fun u_%b () (_ BitVec 8))
(assert
 (let (($x150 (and (distinct u_%b (_ bv2 8)) true)))
 (and $x150 (and (distinct %b %b) true))))
(check-sat)

==> bench/valu126.smt2 <==
(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun %b () (_ BitVec 2))
(assert
 (let (($x2741 (= (bvadd ((_ zero_extend 1) %b) ((_ zero_extend 1) %b)) ((_ zero_extend 1) (bvadd %b %b)))))
 (and $x2741 (and (distinct (bvadd %b %b) (bvshl %b (_ bv1 2))) true))))
(check-sat)
